{"ast":null,"code":"// 网络请求模块\nimport { getTopHighqualityTag, getTopHighquality, getAllTag, getHotTag, getSongList } from \"../../../../network/findmusic/recsonglist/recsonglist\";\n// 随机数\nimport { getRandom } from \"../../../common/getRandom\";\n// 子组件\nimport Topsonglist from \"./Childcomps/Topsonglist.vue\";\nimport SongList from \"../../../components/content/songlist/SongList.vue\";\nimport TagsNav from \"../../../components/content/TagsNav.vue\";\nexport default {\n  naem: \"app_RecsongList\",\n  components: {\n    Topsonglist,\n    SongList,\n    TagsNav\n  },\n  data() {\n    return {\n      tags: [],\n      //精品歌单标签列表\n      topsonglist: [],\n      //顶部精品歌单\n      allTag: [],\n      //所有歌单标签\n      hotTag: [],\n      //热门标签\n      songlist: [],\n      //歌单列表\n      songlistCount: 0,\n      //歌单数量\n      currentPage: 1,\n      //分页器默认当前页数\n      tagName: \"华语\",\n      page: 1 //默认页码\n    };\n  },\n\n  /* \n   生命周期函数 发送网络请求 \n   */\n  created() {\n    // 获取所有歌单分类标签\n    this.getAllTagBy();\n    //  获取热门歌单分类标签\n    this.getHotTagBy();\n    // 随机获取一个顶部精品歌单\n    this.getTopHighQualityRandom();\n    // 默认获取华语歌单列表\n    this.getSongListBy(this.tagName, this.page);\n  },\n  methods: {\n    /* \n      网络请求事件\n      */\n    // 获取所有歌单分类标签\n    getAllTagBy() {\n      getAllTag().then(res => {\n        this.allTag = res.data.sub;\n      });\n    },\n    //  获取热门歌单分类标签\n    getHotTagBy() {\n      getHotTag().then(res => {\n        this.hotTag = res.data.tags;\n      });\n    },\n    // 随机获取一个顶部精品歌单\n    getTopHighQualityRandom() {\n      getTopHighqualityTag().then(res => {\n        // 获取精品歌单所有标签\n        this.tags = res.data.tags;\n        // 获取一个随机精品歌单标签\n        let randomTag = this.tags[getRandom(0, this.tags.length)].name;\n        // 根据随机精品歌单标签,随机获取顶部精品歌单\n        getTopHighquality(randomTag).then(res => {\n          this.topsonglist = res.data.playlists;\n        });\n      });\n    },\n    // 获取歌单列表\n    getSongListBy(tagName, page) {\n      let offset = (page - 1) * 48;\n      getSongList(tagName, offset).then(res => {\n        this.songlist = res.data.playlists;\n        this.songlistCount = res.data.total;\n      });\n    },\n    /* \n      tags标签导航事件监听\n      点击tag标签后从新发送网络请求\n      */\n    tagClick(tagName) {\n      this.tagName = tagName; // 保存当前标签名\n      // 根据标签名从新获取顶部精品歌单( 单击的标签名可能不存在精品歌单标签列表里面，判断一下)\n      if (this.tags.find(item => item.name == tagName)) {\n        getTopHighquality(tagName, 1).then(res => {\n          this.topsonglist = res.data.playlists;\n        });\n      }\n      // 根据标签名获取歌单列表(默认取第一页数据)，如果当前不在第一页，点击完后应该让分页器调到第一页\n      this.getSongListBy(tagName, this.page);\n      this.currentPage = 1;\n    },\n    /* 分页事件 */\n    handleCurrentChange(page) {\n      this.currentPage = page;\n      this.getSongListBy(this.tagName, page);\n      // 滚动返回指定位置\n      let view = document.querySelector(\".view\");\n      view.scrollTo({\n        top: this.$refs.tagsnav.offsetTop - this.$refs.tagsnav.offsetHeight\n      });\n    }\n  }\n};","map":{"version":3,"names":["getTopHighqualityTag","getTopHighquality","getAllTag","getHotTag","getSongList","getRandom","Topsonglist","SongList","TagsNav","naem","components","data","tags","topsonglist","allTag","hotTag","songlist","songlistCount","currentPage","tagName","page","created","getAllTagBy","getHotTagBy","getTopHighQualityRandom","getSongListBy","methods","then","res","sub","randomTag","length","name","playlists","offset","total","tagClick","find","item","handleCurrentChange","view","document","querySelector","scrollTo","top","$refs","tagsnav","offsetTop","offsetHeight"],"sources":["src/views/findmusic/recsonglist/RecsongList.vue"],"sourcesContent":["<template>\n\t<div id=\"recsong-list\">\n\t\t<!-- 顶部精品歌单 -->\n\t\t<Topsonglist :topsonglist=\"topsonglist\" />\n\t\t<!-- 标签导航 -->\n\t\t<div class=\"tagsnav\" ref=\"tagsnav\">\n\t\t\t<TagsNav :allTag=\"allTag\" :hotTag=\"hotTag\" @tagClick=\"tagClick\" />\n\t\t</div>\n\t\t<!-- 歌单列表 -->\n\t\t<div class=\"songlist\">\n\t\t\t<SongList :songlist=\"songlist\" />\n\t\t</div>\n\t\t<!-- 分页器 -->\n\t\t<Pagination :total=\"songlistCount\" :page-size=\"48\" :current-page=\"currentPage\" :scroll-top=\"false\" @handleCurrentChange=\"handleCurrentChange\" />\n\t</div>\n</template>\n\n<script>\n// 网络请求模块\nimport { getTopHighqualityTag, getTopHighquality, getAllTag, getHotTag, getSongList } from \"../../../../network/findmusic/recsonglist/recsonglist\";\n// 随机数\nimport { getRandom } from \"../../../common/getRandom\";\n// 子组件\nimport Topsonglist from \"./Childcomps/Topsonglist.vue\";\nimport SongList from \"../../../components/content/songlist/SongList.vue\";\nimport TagsNav from \"../../../components/content/TagsNav.vue\";\nexport default {\n\tnaem: \"app_RecsongList\",\n\tcomponents: { Topsonglist, SongList, TagsNav },\n\tdata() {\n\t\treturn {\n\t\t\ttags: [], //精品歌单标签列表\n\t\t\ttopsonglist: [], //顶部精品歌单\n\t\t\tallTag: [], //所有歌单标签\n\t\t\thotTag: [], //热门标签\n\t\t\tsonglist: [], //歌单列表\n\t\t\tsonglistCount: 0, //歌单数量\n\t\t\tcurrentPage: 1, //分页器默认当前页数\n\t\t\ttagName: \"华语\",\n\t\t\tpage: 1, //默认页码\n\t\t};\n\t},\n\n\t/* \n  生命周期函数 发送网络请求 \n  */\n\tcreated() {\n\t\t// 获取所有歌单分类标签\n\t\tthis.getAllTagBy();\n\t\t//  获取热门歌单分类标签\n\t\tthis.getHotTagBy();\n\t\t// 随机获取一个顶部精品歌单\n\t\tthis.getTopHighQualityRandom();\n\t\t// 默认获取华语歌单列表\n\t\tthis.getSongListBy(this.tagName, this.page);\n\t},\n\tmethods: {\n\t\t/* \n    网络请求事件\n    */\n\t\t// 获取所有歌单分类标签\n\t\tgetAllTagBy() {\n\t\t\tgetAllTag().then(res => {\n\t\t\t\tthis.allTag = res.data.sub;\n\t\t\t});\n\t\t},\n\t\t//  获取热门歌单分类标签\n\t\tgetHotTagBy() {\n\t\t\tgetHotTag().then(res => {\n\t\t\t\tthis.hotTag = res.data.tags;\n\t\t\t});\n\t\t},\n\t\t// 随机获取一个顶部精品歌单\n\t\tgetTopHighQualityRandom() {\n\t\t\tgetTopHighqualityTag().then(res => {\n\t\t\t\t// 获取精品歌单所有标签\n\t\t\t\tthis.tags = res.data.tags;\n\t\t\t\t// 获取一个随机精品歌单标签\n\t\t\t\tlet randomTag = this.tags[getRandom(0, this.tags.length)].name;\n\t\t\t\t// 根据随机精品歌单标签,随机获取顶部精品歌单\n\t\t\t\tgetTopHighquality(randomTag).then(res => {\n\t\t\t\t\tthis.topsonglist = res.data.playlists;\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t// 获取歌单列表\n\t\tgetSongListBy(tagName, page) {\n\t\t\tlet offset = (page - 1) * 48;\n\t\t\tgetSongList(tagName, offset).then(res => {\n\t\t\t\tthis.songlist = res.data.playlists;\n\t\t\t\tthis.songlistCount = res.data.total;\n\t\t\t});\n\t\t},\n\n\t\t/* \n    tags标签导航事件监听\n    点击tag标签后从新发送网络请求\n    */\n\t\ttagClick(tagName) {\n\t\t\tthis.tagName = tagName; // 保存当前标签名\n\t\t\t// 根据标签名从新获取顶部精品歌单( 单击的标签名可能不存在精品歌单标签列表里面，判断一下)\n\t\t\tif (this.tags.find(item => item.name == tagName)) {\n\t\t\t\tgetTopHighquality(tagName, 1).then(res => {\n\t\t\t\t\tthis.topsonglist = res.data.playlists;\n\t\t\t\t});\n\t\t\t}\n\t\t\t// 根据标签名获取歌单列表(默认取第一页数据)，如果当前不在第一页，点击完后应该让分页器调到第一页\n\t\t\tthis.getSongListBy(tagName, this.page);\n\t\t\tthis.currentPage = 1;\n\t\t},\n\n\t\t/* 分页事件 */\n\t\thandleCurrentChange(page) {\n\t\t\tthis.currentPage = page;\n\t\t\tthis.getSongListBy(this.tagName, page);\n\t\t\t// 滚动返回指定位置\n\t\t\tlet view = document.querySelector(\".view\");\n\t\t\tview.scrollTo({\n\t\t\t\ttop: this.$refs.tagsnav.offsetTop - this.$refs.tagsnav.offsetHeight,\n\t\t\t});\n\t\t},\n\t},\n};\n</script>\n\n<style lang=\"less\" scoped>\n.tagsnav {\n\tmargin-top: 30px;\n}\n.songlist {\n\tmargin-top: 20px;\n}\n</style>\n"],"mappings":"AAkBA;AACA,SAAAA,oBAAA,EAAAC,iBAAA,EAAAC,SAAA,EAAAC,SAAA,EAAAC,WAAA;AACA;AACA,SAAAC,SAAA;AACA;AACA,OAAAC,WAAA;AACA,OAAAC,QAAA;AACA,OAAAC,OAAA;AACA;EACAC,IAAA;EACAC,UAAA;IAAAJ,WAAA;IAAAC,QAAA;IAAAC;EAAA;EACAG,KAAA;IACA;MACAC,IAAA;MAAA;MACAC,WAAA;MAAA;MACAC,MAAA;MAAA;MACAC,MAAA;MAAA;MACAC,QAAA;MAAA;MACAC,aAAA;MAAA;MACAC,WAAA;MAAA;MACAC,OAAA;MACAC,IAAA;IACA;EACA;;EAEA;AACA;AACA;EACAC,QAAA;IACA;IACA,KAAAC,WAAA;IACA;IACA,KAAAC,WAAA;IACA;IACA,KAAAC,uBAAA;IACA;IACA,KAAAC,aAAA,MAAAN,OAAA,OAAAC,IAAA;EACA;EACAM,OAAA;IACA;AACA;AACA;IACA;IACAJ,YAAA;MACApB,SAAA,GAAAyB,IAAA,CAAAC,GAAA;QACA,KAAAd,MAAA,GAAAc,GAAA,CAAAjB,IAAA,CAAAkB,GAAA;MACA;IACA;IACA;IACAN,YAAA;MACApB,SAAA,GAAAwB,IAAA,CAAAC,GAAA;QACA,KAAAb,MAAA,GAAAa,GAAA,CAAAjB,IAAA,CAAAC,IAAA;MACA;IACA;IACA;IACAY,wBAAA;MACAxB,oBAAA,GAAA2B,IAAA,CAAAC,GAAA;QACA;QACA,KAAAhB,IAAA,GAAAgB,GAAA,CAAAjB,IAAA,CAAAC,IAAA;QACA;QACA,IAAAkB,SAAA,QAAAlB,IAAA,CAAAP,SAAA,SAAAO,IAAA,CAAAmB,MAAA,GAAAC,IAAA;QACA;QACA/B,iBAAA,CAAA6B,SAAA,EAAAH,IAAA,CAAAC,GAAA;UACA,KAAAf,WAAA,GAAAe,GAAA,CAAAjB,IAAA,CAAAsB,SAAA;QACA;MACA;IACA;IACA;IACAR,cAAAN,OAAA,EAAAC,IAAA;MACA,IAAAc,MAAA,IAAAd,IAAA;MACAhB,WAAA,CAAAe,OAAA,EAAAe,MAAA,EAAAP,IAAA,CAAAC,GAAA;QACA,KAAAZ,QAAA,GAAAY,GAAA,CAAAjB,IAAA,CAAAsB,SAAA;QACA,KAAAhB,aAAA,GAAAW,GAAA,CAAAjB,IAAA,CAAAwB,KAAA;MACA;IACA;IAEA;AACA;AACA;AACA;IACAC,SAAAjB,OAAA;MACA,KAAAA,OAAA,GAAAA,OAAA;MACA;MACA,SAAAP,IAAA,CAAAyB,IAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAN,IAAA,IAAAb,OAAA;QACAlB,iBAAA,CAAAkB,OAAA,KAAAQ,IAAA,CAAAC,GAAA;UACA,KAAAf,WAAA,GAAAe,GAAA,CAAAjB,IAAA,CAAAsB,SAAA;QACA;MACA;MACA;MACA,KAAAR,aAAA,CAAAN,OAAA,OAAAC,IAAA;MACA,KAAAF,WAAA;IACA;IAEA;IACAqB,oBAAAnB,IAAA;MACA,KAAAF,WAAA,GAAAE,IAAA;MACA,KAAAK,aAAA,MAAAN,OAAA,EAAAC,IAAA;MACA;MACA,IAAAoB,IAAA,GAAAC,QAAA,CAAAC,aAAA;MACAF,IAAA,CAAAG,QAAA;QACAC,GAAA,OAAAC,KAAA,CAAAC,OAAA,CAAAC,SAAA,QAAAF,KAAA,CAAAC,OAAA,CAAAE;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}