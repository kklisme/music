{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nconst mutations = {\n  /* 更新登录状态 */\n  updateLogin(state, payload) {\n    state.isLogin = payload;\n  },\n  /* 保存用户信息 */\n  saveUserInfo(state, payload) {\n    state.userInfo = payload;\n  },\n  /* 保存用户歌单 */\n  saveUserSongList(state, payload) {\n    state.userSongList = payload;\n  },\n  /* 保存用户关注列表 */\n  saveUserFollowsList(state, payload) {\n    state.userFollowsList = payload;\n  },\n  /* 保存用户的收藏 */\n  // 收藏的专辑\n  saveFavoriteAlbum(state, payload) {\n    state.subAlbumlist = payload;\n  },\n  // 歌手\n  saveFavoriteSinger(state, payload) {\n    state.subSingerlist = payload;\n  },\n  // mv\n  saveFavoriteMv(state, payload) {\n    state.subMvlist = payload;\n  },\n  // 用户喜欢的音乐id列表\n  saveLikeSongIds(state, payload) {\n    state.likeSongIds = payload;\n    localStorage.setItem(\"likeSongIds\", JSON.stringify(state.likeSongIds));\n  },\n  /* \n  音乐播放\n   */\n  // 改变音乐播放状态\n  changePlayState(state, payload) {\n    state.isPlaying = payload;\n  },\n  // 保存歌曲url\n  saveSongUrl(state, payload) {\n    state.songUrl = payload;\n  },\n  // 保存当前播放歌曲详情,并且添加当前播放歌曲到播放历史记录\n  saveSongDetail(state, payload) {\n    state.nowSongDetail = payload;\n    localStorage.setItem(\"nowSongDetail\", JSON.stringify(state.nowSongDetail));\n    // 添加当前播放歌曲到播放历史记录\n    let index = state.historyPlay.findIndex(item => {\n      return item.id == payload.id;\n    });\n    //如果列表不存在相同的歌曲 再添加到播放历史列表\n    if (index == -1) {\n      state.historyPlay.unshift(payload);\n      localStorage.setItem(\"historyPlay\", JSON.stringify(state.historyPlay));\n    }\n  },\n  //添加单曲到当前播放列表\n  addPlayinglist(state, song) {\n    // 列表查找相同的歌曲\n    let index = state.playingList.findIndex(item => {\n      return item.id == song.id;\n    });\n    //如果列表不存在相同的歌曲 再添加到播放列表\n    if (index == -1) {\n      state.playingList.unshift(song);\n      localStorage.setItem(\"playingList\", JSON.stringify(state.playingList));\n    }\n  },\n  // 点击播放全部，添加当前歌单所有歌曲到播放列表\n  addAllSong(state, payload) {\n    state.playingList = payload;\n    localStorage.setItem(\"playingList\", JSON.stringify(state.playingList));\n  },\n  // 删除播放列表单曲\n  deleteSong(state, songId) {\n    let index = state.playingList.findIndex(item => {\n      return songId == item.id;\n    });\n    state.playingList.splice(index, 1);\n    localStorage.setItem(\"playingList\", JSON.stringify(state.playingList));\n  },\n  // 清空播放列表\n  deleteAll(state) {\n    state.playingList = [];\n    state.songUrl = \"\";\n    state.nowSongDetail = {};\n    state.isPlaying = false;\n    localStorage.removeItem(\"playingList\");\n    localStorage.removeItem(\"nowSongDetail\");\n    localStorage.removeItem(\"currentRow\");\n  },\n  // 清空历史记录\n  deleteAllHistory(state) {\n    state.historyPlay = [];\n    localStorage.setItem(\"historyPlay\", JSON.stringify(state.historyPlay));\n  },\n  // 删除历史记录单曲\n  deleteHistory(state, songId) {\n    let index = state.historyPlay.findIndex(item => {\n      return songId == item.id;\n    });\n    state.historyPlay.splice(index, 1);\n    localStorage.setItem(\"historyPlay\", JSON.stringify(state.historyPlay));\n  },\n  //是否显示当前播放歌曲详情页\n  showSongDetail(state) {\n    state.isShowSongDetail = !state.isShowSongDetail;\n  },\n  // 保存当前歌曲播放的实时秒数\n  saveCurrentSeconds(state, payload) {\n    state.currentSecond = payload;\n    localStorage.setItem(\"currentSecond\", JSON.stringify(state.currentSecond));\n  },\n  //保存当前播放歌词行数\n  saveCurrentRow(state, payload) {\n    state.currentRow = payload;\n    localStorage.setItem(\"currentRow\", JSON.stringify(state.currentRow));\n  },\n  /* \n  浮动歌词\n   */\n  //当前播放歌曲歌词 用于浮动歌词显示\n  saveCurrentLyric(state, payload) {\n    state.currentLyric = payload;\n  },\n  // 是否显示浮动歌词\n  showFloatLyric(state) {\n    state.showFloatLyric = !state.showFloatLyric;\n  },\n  // 更新当前下载的音乐信息\n  updateDownloadMusicInfo(state, payload) {\n    state.downloadMusicInfo = payload;\n  }\n};\nexport default mutations;","map":{"version":3,"names":["mutations","updateLogin","state","payload","isLogin","saveUserInfo","userInfo","saveUserSongList","userSongList","saveUserFollowsList","userFollowsList","saveFavoriteAlbum","subAlbumlist","saveFavoriteSinger","subSingerlist","saveFavoriteMv","subMvlist","saveLikeSongIds","likeSongIds","localStorage","setItem","JSON","stringify","changePlayState","isPlaying","saveSongUrl","songUrl","saveSongDetail","nowSongDetail","index","historyPlay","findIndex","item","id","unshift","addPlayinglist","song","playingList","addAllSong","deleteSong","songId","splice","deleteAll","removeItem","deleteAllHistory","deleteHistory","showSongDetail","isShowSongDetail","saveCurrentSeconds","currentSecond","saveCurrentRow","currentRow","saveCurrentLyric","currentLyric","showFloatLyric","updateDownloadMusicInfo","downloadMusicInfo"],"sources":["C:/Users/kiki0128/Desktop/网易云音乐/Vue2-music-main/src/store/mutations.js"],"sourcesContent":["const mutations = {\n\t/* 更新登录状态 */\n\tupdateLogin(state, payload) {\n\t\tstate.isLogin = payload;\n\t},\n\t/* 保存用户信息 */\n\tsaveUserInfo(state, payload) {\n\t\tstate.userInfo = payload;\n\t},\n\t/* 保存用户歌单 */\n\tsaveUserSongList(state, payload) {\n\t\tstate.userSongList = payload;\n\t},\n\n\t/* 保存用户关注列表 */\n\tsaveUserFollowsList(state, payload) {\n\t\tstate.userFollowsList = payload;\n\t},\n\n\t/* 保存用户的收藏 */\n\t// 收藏的专辑\n\tsaveFavoriteAlbum(state, payload) {\n\t\tstate.subAlbumlist = payload;\n\t},\n\t// 歌手\n\tsaveFavoriteSinger(state, payload) {\n\t\tstate.subSingerlist = payload;\n\t},\n\t// mv\n\tsaveFavoriteMv(state, payload) {\n\t\tstate.subMvlist = payload;\n\t},\n\t// 用户喜欢的音乐id列表\n\tsaveLikeSongIds(state, payload) {\n\t\tstate.likeSongIds = payload;\n\t\tlocalStorage.setItem(\"likeSongIds\", JSON.stringify(state.likeSongIds));\n\t},\n\n\t/* \n\t音乐播放\n\t */\n\t// 改变音乐播放状态\n\tchangePlayState(state, payload) {\n\t\tstate.isPlaying = payload;\n\t},\n\n\t// 保存歌曲url\n\tsaveSongUrl(state, payload) {\n\t\tstate.songUrl = payload;\n\t},\n\n\t// 保存当前播放歌曲详情,并且添加当前播放歌曲到播放历史记录\n\tsaveSongDetail(state, payload) {\n\t\tstate.nowSongDetail = payload;\n\t\tlocalStorage.setItem(\"nowSongDetail\", JSON.stringify(state.nowSongDetail));\n\t\t// 添加当前播放歌曲到播放历史记录\n\t\tlet index = state.historyPlay.findIndex(item => {\n\t\t\treturn item.id == payload.id;\n\t\t});\n\t\t//如果列表不存在相同的歌曲 再添加到播放历史列表\n\t\tif (index == -1) {\n\t\t\tstate.historyPlay.unshift(payload);\n\t\t\tlocalStorage.setItem(\"historyPlay\", JSON.stringify(state.historyPlay));\n\t\t}\n\t},\n\n\t//添加单曲到当前播放列表\n\taddPlayinglist(state, song) {\n\t\t// 列表查找相同的歌曲\n\t\tlet index = state.playingList.findIndex(item => {\n\t\t\treturn item.id == song.id;\n\t\t});\n\t\t//如果列表不存在相同的歌曲 再添加到播放列表\n\t\tif (index == -1) {\n\t\t\tstate.playingList.unshift(song);\n\t\t\tlocalStorage.setItem(\"playingList\", JSON.stringify(state.playingList));\n\t\t}\n\t},\n\n\t// 点击播放全部，添加当前歌单所有歌曲到播放列表\n\taddAllSong(state, payload) {\n\t\tstate.playingList = payload;\n\t\tlocalStorage.setItem(\"playingList\", JSON.stringify(state.playingList));\n\t},\n\n\t// 删除播放列表单曲\n\tdeleteSong(state, songId) {\n\t\tlet index = state.playingList.findIndex(item => {\n\t\t\treturn songId == item.id;\n\t\t});\n\t\tstate.playingList.splice(index, 1);\n\t\tlocalStorage.setItem(\"playingList\", JSON.stringify(state.playingList));\n\t},\n\n\t// 清空播放列表\n\tdeleteAll(state) {\n\t\tstate.playingList = [];\n\t\tstate.songUrl = \"\";\n\t\tstate.nowSongDetail = {};\n\t\tstate.isPlaying = false;\n\t\tlocalStorage.removeItem(\"playingList\");\n\t\tlocalStorage.removeItem(\"nowSongDetail\");\n\t\tlocalStorage.removeItem(\"currentRow\");\n\t},\n\n\t// 清空历史记录\n\tdeleteAllHistory(state) {\n\t\tstate.historyPlay = [];\n\t\tlocalStorage.setItem(\"historyPlay\", JSON.stringify(state.historyPlay));\n\t},\n\n\t// 删除历史记录单曲\n\tdeleteHistory(state, songId) {\n\t\tlet index = state.historyPlay.findIndex(item => {\n\t\t\treturn songId == item.id;\n\t\t});\n\t\tstate.historyPlay.splice(index, 1);\n\t\tlocalStorage.setItem(\"historyPlay\", JSON.stringify(state.historyPlay));\n\t},\n\n\t//是否显示当前播放歌曲详情页\n\tshowSongDetail(state) {\n\t\tstate.isShowSongDetail = !state.isShowSongDetail;\n\t},\n\n\t// 保存当前歌曲播放的实时秒数\n\tsaveCurrentSeconds(state, payload) {\n\t\tstate.currentSecond = payload;\n\t\tlocalStorage.setItem(\"currentSecond\", JSON.stringify(state.currentSecond));\n\t},\n\n\t//保存当前播放歌词行数\n\tsaveCurrentRow(state, payload) {\n\t\tstate.currentRow = payload;\n\t\tlocalStorage.setItem(\"currentRow\", JSON.stringify(state.currentRow));\n\t},\n\n\t/* \n\t浮动歌词\n\t */\n\t//当前播放歌曲歌词 用于浮动歌词显示\n\tsaveCurrentLyric(state, payload) {\n\t\tstate.currentLyric = payload;\n\t},\n\t// 是否显示浮动歌词\n\tshowFloatLyric(state) {\n\t\tstate.showFloatLyric = !state.showFloatLyric;\n\t},\n\t// 更新当前下载的音乐信息\n\tupdateDownloadMusicInfo(state, payload) {\n\t\tstate.downloadMusicInfo = payload;\n\t},\n};\nexport default mutations;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}