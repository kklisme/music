{"ast":null,"code":"export default {\n  name: \"app_Progress\",\n  props: {\n    // 百分比进度\n    percent: {\n      type: Number,\n      default: 0\n    },\n    // 进度条尺寸\n    progressSize: {\n      type: [Number, String],\n      default: 6\n    },\n    // 进度条颜色\n    progressColor: {\n      type: [String, Array],\n      default: \"\"\n    },\n    // 是否一直显示圆形按钮\n    showRadiusBtn: {\n      type: Boolean,\n      default: true\n    },\n    // 是否禁用进度条\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示提示框\n    showToolTip: {\n      type: Boolean,\n      default: true\n    },\n    // 是否格式化提示框\n    isFormatTooltip: {\n      type: Boolean,\n      default: false\n    },\n    // 格式化提示框函数\n    formatTooltip: {\n      type: Function\n    },\n    // 是否显示activeBar\n    isActiveBar: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      tooltipTxt: 0,\n      //悬浮提示框文本\n      hoverShowRadiusBtn: false,\n      //鼠标经过显示进度条圆按钮\n      radiusBtnActive: false,\n      //圆按钮是否处于活跃\n      hoverShowToolTip: false,\n      //鼠标经过显示tooltip\n      isDrag: false //是否正在拖拽进度条\n    };\n  },\n\n  mounted() {\n    this.setProgressBar(this.percent);\n  },\n  model: {\n    prop: \"percent\",\n    event: \"onChange\"\n  },\n  computed: {\n    // 进度条盒子样式\n    progressBoxStyle() {\n      let style = {\n        height: `${this.progressSize}px`,\n        borderRadius: `${this.progressSize}px`,\n        cursor: this.disabled ? \"not-allowed\" : \"pointer\"\n      };\n      return style;\n    },\n    // 进度条样式\n    progressBarStyle() {\n      let style = {\n        // width: `${this.percent}%`,\n        borderRadius: `${this.progressSize}px`,\n        background: typeof this.progressColor == \"string\" ? `${this.progressColor}` : `linear-gradient(to right,${this.progressColor[0]} 0%,${this.progressColor[1]} 100%)`,\n        transition: this.isDrag ? \"none\" : \"all 0.3s ease-out\",\n        cursor: this.disabled ? \"not-allowed\" : \"pointer\"\n      };\n      return style;\n    },\n    // 圆形按钮样式\n    radiusBtnStyle() {\n      let style = {\n        // left: `${this.percent}%`,\n        width: this.radiusBtnActive ? `${this.radiusBtnSize + 3}px` : `${this.radiusBtnSize}px`,\n        height: this.radiusBtnActive ? `${this.radiusBtnSize + 3}px` : `${this.radiusBtnSize}px`,\n        transform: `translate(${-this.radiusBtnSize + 5}px,-50%)`,\n        transition: this.isDrag ? \"none\" : \"all 0.3s ease-out\",\n        cursor: this.disabled ? \"not-allowed\" : \"pointer\"\n      };\n      return style;\n    },\n    // 进度条圆形按钮大小，根据进度条大小动态计算\n    radiusBtnSize() {\n      let radiusBtnSize = this.progressSize >= 8 ? this.progressSize * 2 : this.progressSize * 2.5;\n      radiusBtnSize = this.progressSize <= 3 ? this.progressSize * 4 : radiusBtnSize;\n      radiusBtnSize = radiusBtnSize < 12 ? 12 : radiusBtnSize;\n      return radiusBtnSize;\n    }\n  },\n  methods: {\n    // 获取鼠标在进度条上的位置，返回一个百分比值\n    getMousePositon(e) {\n      let progressBoxWidth = this.$refs.progressBox.getBoundingClientRect().width; //进度条总宽度\n      let progressBoxLeft = this.$refs.progressBox.getBoundingClientRect().left; //进度条距左边距离\n      let mousePositon = e.clientX - progressBoxLeft;\n      mousePositon = mousePositon <= 0 ? 0 : mousePositon; //设置最小边界值\n      mousePositon = mousePositon >= progressBoxWidth ? progressBoxWidth : mousePositon; //设置最大边界值\n      let percentLength = Math.ceil(mousePositon * 100 / progressBoxWidth);\n      return percentLength;\n    },\n    // 设置进度条长度\n    setProgressBar(percent) {\n      this.$refs.progressBar.style.width = percent + \"%\";\n      this.$refs.radiusBtn.style.left = percent + \"%\";\n    },\n    // 鼠标在进度条上移动时,设置tooltip位置,设置当前位置百分比数值\n    setTooltip(e) {\n      this.hoverShowRadiusBtn = true;\n      if (this.disabled) return; //禁用进度条\n      if (!this.showToolTip) return; // 父组件传值控制不显示tooltip\n      this.hoverShowToolTip = true;\n      let percentLength = this.getMousePositon(e);\n      this.$refs.tooltip.style.left = percentLength + \"%\";\n      this.tooltipTxt = this.isFormatTooltip ? this.formatTooltip ? this.formatTooltip(percentLength) : percentLength : percentLength;\n    },\n    //改变进度条progressBar\n    changeProgressBar(e) {\n      if (this.disabled) return;\n      let percentLength = this.getMousePositon(e);\n      this.$emit(\"onChange\", percentLength);\n    },\n    // 鼠标经过圆形按钮\n    radiusBtnHover() {\n      this.hoverShowRadiusBtn = true;\n      this.radiusBtnActive = true;\n    },\n    // 鼠标离开圆形按钮\n    radiusBtnLeave() {\n      if (!this.isDrag) {\n        this.hoverShowRadiusBtn = false;\n        this.radiusBtnActive = false;\n      }\n    },\n    // 鼠标按下圆形按钮拖拽进度条\n    dragProgressBar() {\n      //禁用进度条\n      if (this.disabled) return;\n      // 鼠标移动，拖拽进度条\n      let move = e => {\n        this.isDrag = true;\n        let percentLength = this.getMousePositon(e);\n        this.setProgressBar(percentLength);\n        // this.$emit(\"update:percent\", percentLength);\n        this.setTooltip(e);\n      };\n      // 鼠标松开，就停止拖拽，让鼠标移动事件解除,并且改变进度条\n      let moveup = e => {\n        this.isDrag = false;\n        document.removeEventListener(\"mousemove\", move);\n        this.changeProgressBar(e);\n        this.progressBoxLeave();\n        this.radiusBtnActive = false;\n        document.removeEventListener(\"mouseup\", moveup);\n      };\n      document.addEventListener(\"mousemove\", move);\n      document.addEventListener(\"mouseup\", moveup);\n    },\n    // 鼠标离开进度条栏\n    progressBoxLeave() {\n      this.hoverShowToolTip = false;\n      this.hoverShowRadiusBtn = false;\n    }\n  },\n  watch: {\n    percent(percent) {\n      if (!this.isDrag) {\n        this.setProgressBar(percent);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","percent","type","Number","default","progressSize","String","progressColor","Array","showRadiusBtn","Boolean","disabled","showToolTip","isFormatTooltip","formatTooltip","Function","isActiveBar","data","tooltipTxt","hoverShowRadiusBtn","radiusBtnActive","hoverShowToolTip","isDrag","mounted","setProgressBar","model","prop","event","computed","progressBoxStyle","style","height","borderRadius","cursor","progressBarStyle","background","transition","radiusBtnStyle","width","radiusBtnSize","transform","methods","getMousePositon","e","progressBoxWidth","$refs","progressBox","getBoundingClientRect","progressBoxLeft","left","mousePositon","clientX","percentLength","Math","ceil","progressBar","radiusBtn","setTooltip","tooltip","changeProgressBar","$emit","radiusBtnHover","radiusBtnLeave","dragProgressBar","move","moveup","document","removeEventListener","progressBoxLeave","addEventListener","watch"],"sources":["src/components/common/Progress.vue"],"sourcesContent":["<template>\n\t<div\n\t\tref=\"progressBox\"\n\t\tclass=\"progressBox\"\n\t\t:style=\"progressBoxStyle\"\n\t\t@mousemove=\"setTooltip\"\n\t\t@mouseleave=\"progressBoxLeave\"\n\t\t@click=\"changeProgressBar\"\n\t>\n\t\t<!-- 进度条 -->\n\t\t<div class=\"progressBar\" ref=\"progressBar\" :style=\"progressBarStyle\">\n\t\t\t<div class=\"activeBar\" v-if=\"isActiveBar\"></div>\n\t\t</div>\n\t\t<!-- 进度条上圆形按钮 -->\n\t\t<transition name=\"el-fade-in-linear\">\n\t\t\t<div\n\t\t\t\tclass=\"radiusBtn\"\n\t\t\t\tref=\"radiusBtn\"\n\t\t\t\t:style=\"radiusBtnStyle\"\n\t\t\t\tv-show=\"showRadiusBtn ? showRadiusBtn : hoverShowRadiusBtn\"\n\t\t\t\t@mouseenter=\"radiusBtnHover\"\n\t\t\t\t@mouseleave=\"radiusBtnLeave\"\n\t\t\t\t@mousedown=\"dragProgressBar\"\n\t\t\t></div>\n\t\t</transition>\n\t\t<!--提示框  -->\n\t\t<transition name=\"el-fade-in-linear\">\n\t\t\t<div class=\"tooltip\" ref=\"tooltip\" :style=\"{ bottom: `${progressSize + 10}px` }\" v-show=\"showToolTip && hoverShowToolTip\">\n\t\t\t\t{{ tooltipTxt }}\n\t\t\t</div>\n\t\t</transition>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tname: \"app_Progress\",\n\tprops: {\n\t\t// 百分比进度\n\t\tpercent: {\n\t\t\ttype: Number,\n\t\t\tdefault: 0,\n\t\t},\n\t\t// 进度条尺寸\n\t\tprogressSize: {\n\t\t\ttype: [Number, String],\n\t\t\tdefault: 6,\n\t\t},\n\t\t// 进度条颜色\n\t\tprogressColor: {\n\t\t\ttype: [String, Array],\n\t\t\tdefault: \"\",\n\t\t},\n\t\t// 是否一直显示圆形按钮\n\t\tshowRadiusBtn: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t},\n\t\t// 是否禁用进度条\n\t\tdisabled: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\t// 是否显示提示框\n\t\tshowToolTip: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t},\n\t\t// 是否格式化提示框\n\t\tisFormatTooltip: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\t// 格式化提示框函数\n\t\tformatTooltip: {\n\t\t\ttype: Function,\n\t\t},\n\t\t// 是否显示activeBar\n\t\tisActiveBar: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true,\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\ttooltipTxt: 0, //悬浮提示框文本\n\t\t\thoverShowRadiusBtn: false, //鼠标经过显示进度条圆按钮\n\t\t\tradiusBtnActive: false, //圆按钮是否处于活跃\n\t\t\thoverShowToolTip: false, //鼠标经过显示tooltip\n\t\t\tisDrag: false, //是否正在拖拽进度条\n\t\t};\n\t},\n\tmounted() {\n\t\tthis.setProgressBar(this.percent);\n\t},\n\tmodel: {\n\t\tprop: \"percent\",\n\t\tevent: \"onChange\",\n\t},\n\tcomputed: {\n\t\t// 进度条盒子样式\n\t\tprogressBoxStyle() {\n\t\t\tlet style = {\n\t\t\t\theight: `${this.progressSize}px`,\n\t\t\t\tborderRadius: `${this.progressSize}px`,\n\t\t\t\tcursor: this.disabled ? \"not-allowed\" : \"pointer\",\n\t\t\t};\n\t\t\treturn style;\n\t\t},\n\t\t// 进度条样式\n\t\tprogressBarStyle() {\n\t\t\tlet style = {\n\t\t\t\t// width: `${this.percent}%`,\n\t\t\t\tborderRadius: `${this.progressSize}px`,\n\t\t\t\tbackground:\n\t\t\t\t\ttypeof this.progressColor == \"string\"\n\t\t\t\t\t\t? `${this.progressColor}`\n\t\t\t\t\t\t: `linear-gradient(to right,${this.progressColor[0]} 0%,${this.progressColor[1]} 100%)`,\n\t\t\t\ttransition: this.isDrag ? \"none\" : \"all 0.3s ease-out\",\n\t\t\t\tcursor: this.disabled ? \"not-allowed\" : \"pointer\",\n\t\t\t};\n\t\t\treturn style;\n\t\t},\n\t\t// 圆形按钮样式\n\t\tradiusBtnStyle() {\n\t\t\tlet style = {\n\t\t\t\t// left: `${this.percent}%`,\n\t\t\t\twidth: this.radiusBtnActive ? `${this.radiusBtnSize + 3}px` : `${this.radiusBtnSize}px`,\n\t\t\t\theight: this.radiusBtnActive ? `${this.radiusBtnSize + 3}px` : `${this.radiusBtnSize}px`,\n\t\t\t\ttransform: `translate(${-this.radiusBtnSize + 5}px,-50%)`,\n\t\t\t\ttransition: this.isDrag ? \"none\" : \"all 0.3s ease-out\",\n\t\t\t\tcursor: this.disabled ? \"not-allowed\" : \"pointer\",\n\t\t\t};\n\t\t\treturn style;\n\t\t},\n\t\t// 进度条圆形按钮大小，根据进度条大小动态计算\n\t\tradiusBtnSize() {\n\t\t\tlet radiusBtnSize = this.progressSize >= 8 ? this.progressSize * 2 : this.progressSize * 2.5;\n\t\t\tradiusBtnSize = this.progressSize <= 3 ? this.progressSize * 4 : radiusBtnSize;\n\t\t\tradiusBtnSize = radiusBtnSize < 12 ? 12 : radiusBtnSize;\n\t\t\treturn radiusBtnSize;\n\t\t},\n\t},\n\tmethods: {\n\t\t// 获取鼠标在进度条上的位置，返回一个百分比值\n\t\tgetMousePositon(e) {\n\t\t\tlet progressBoxWidth = this.$refs.progressBox.getBoundingClientRect().width; //进度条总宽度\n\t\t\tlet progressBoxLeft = this.$refs.progressBox.getBoundingClientRect().left; //进度条距左边距离\n\t\t\tlet mousePositon = e.clientX - progressBoxLeft;\n\t\t\tmousePositon = mousePositon <= 0 ? 0 : mousePositon; //设置最小边界值\n\t\t\tmousePositon = mousePositon >= progressBoxWidth ? progressBoxWidth : mousePositon; //设置最大边界值\n\t\t\tlet percentLength = Math.ceil((mousePositon * 100) / progressBoxWidth);\n\t\t\treturn percentLength;\n\t\t},\n\t\t// 设置进度条长度\n\t\tsetProgressBar(percent) {\n\t\t\tthis.$refs.progressBar.style.width = percent + \"%\";\n\t\t\tthis.$refs.radiusBtn.style.left = percent + \"%\";\n\t\t},\n\t\t// 鼠标在进度条上移动时,设置tooltip位置,设置当前位置百分比数值\n\t\tsetTooltip(e) {\n\t\t\tthis.hoverShowRadiusBtn = true;\n\t\t\tif (this.disabled) return; //禁用进度条\n\t\t\tif (!this.showToolTip) return; // 父组件传值控制不显示tooltip\n\t\t\tthis.hoverShowToolTip = true;\n\t\t\tlet percentLength = this.getMousePositon(e);\n\t\t\tthis.$refs.tooltip.style.left = percentLength + \"%\";\n\t\t\tthis.tooltipTxt = this.isFormatTooltip\n\t\t\t\t? this.formatTooltip\n\t\t\t\t\t? this.formatTooltip(percentLength)\n\t\t\t\t\t: percentLength\n\t\t\t\t: percentLength;\n\t\t},\n\t\t//改变进度条progressBar\n\t\tchangeProgressBar(e) {\n\t\t\tif (this.disabled) return;\n\t\t\tlet percentLength = this.getMousePositon(e);\n\t\t\tthis.$emit(\"onChange\", percentLength);\n\t\t},\n\t\t// 鼠标经过圆形按钮\n\t\tradiusBtnHover() {\n\t\t\tthis.hoverShowRadiusBtn = true;\n\t\t\tthis.radiusBtnActive = true;\n\t\t},\n\t\t// 鼠标离开圆形按钮\n\t\tradiusBtnLeave() {\n\t\t\tif (!this.isDrag) {\n\t\t\t\tthis.hoverShowRadiusBtn = false;\n\t\t\t\tthis.radiusBtnActive = false;\n\t\t\t}\n\t\t},\n\t\t// 鼠标按下圆形按钮拖拽进度条\n\t\tdragProgressBar() {\n\t\t\t//禁用进度条\n\t\t\tif (this.disabled) return;\n\t\t\t// 鼠标移动，拖拽进度条\n\t\t\tlet move = e => {\n\t\t\t\tthis.isDrag = true;\n\t\t\t\tlet percentLength = this.getMousePositon(e);\n\t\t\t\tthis.setProgressBar(percentLength);\n\t\t\t\t// this.$emit(\"update:percent\", percentLength);\n\t\t\t\tthis.setTooltip(e);\n\t\t\t};\n\t\t\t// 鼠标松开，就停止拖拽，让鼠标移动事件解除,并且改变进度条\n\t\t\tlet moveup = e => {\n\t\t\t\tthis.isDrag = false;\n\t\t\t\tdocument.removeEventListener(\"mousemove\", move);\n\t\t\t\tthis.changeProgressBar(e);\n\t\t\t\tthis.progressBoxLeave();\n\t\t\t\tthis.radiusBtnActive = false;\n\t\t\t\tdocument.removeEventListener(\"mouseup\", moveup);\n\t\t\t};\n\t\t\tdocument.addEventListener(\"mousemove\", move);\n\t\t\tdocument.addEventListener(\"mouseup\", moveup);\n\t\t},\n\t\t// 鼠标离开进度条栏\n\t\tprogressBoxLeave() {\n\t\t\tthis.hoverShowToolTip = false;\n\t\t\tthis.hoverShowRadiusBtn = false;\n\t\t},\n\t},\n\twatch: {\n\t\tpercent(percent) {\n\t\t\tif (!this.isDrag) {\n\t\t\t\tthis.setProgressBar(percent);\n\t\t\t}\n\t\t},\n\t},\n};\n</script>\n\n<style lang=\"less\" scoped>\n// 进度条背景盒子\n.progressBox {\n\tposition: relative;\n\twidth: 100%;\n\theight: 6px;\n\tbackground-color: #eee;\n\tborder-radius: 6px;\n}\n/* 已播放的进度条颜色 */\n.progressBar {\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\twidth: 0;\n\tbackground-color: var(--themeColor);\n\tborder-radius: 6px;\n\ttransition: all 0.3s ease-out;\n}\n// 进度条小球按钮\n.radiusBtn {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 0;\n\tborder-radius: 50%;\n\tborder: 2px solid var(--themeColor);\n\tbackground: #fff;\n\ttransition: all 0.3s ease-out;\n\t&::after {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\tleft: 50%;\n\t\ttop: 50%;\n\t\ttransform: translate(-50%, -50%);\n\t\twidth: 40%;\n\t\theight: 40%;\n\t\tborder-radius: 50%;\n\t\tbackground-color: var(--themeColor);\n\t\ttransition: all 0.3s ease-out;\n\t}\n}\n/* 悬停显示百分比 */\n.tooltip {\n\tposition: absolute;\n\ttransform: translateX(-50%);\n\tbackground-color: #303133;\n\tcolor: #fff;\n\tfont-size: 12px;\n\tpadding: 5px 6px;\n\tborder-radius: 4px;\n\t&::after {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\ttop: 22px;\n\t\tleft: 50%;\n\t\ttransform: translateX(-50%);\n\t\twidth: 0;\n\t\theight: 0;\n\t\tborder: 8px solid;\n\t\tborder-left-color: transparent;\n\t\tborder-top-color: #303133;\n\t\tborder-right-color: transparent;\n\t\tborder-bottom-color: transparent;\n\t}\n}\n/* 进度活跃条动画 */\n.activeBar {\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\tbackground-color: #000;\n\tborder-radius: 6px;\n\tanimation: activebar 2s ease-out infinite;\n}\n@keyframes activebar {\n\t0% {\n\t\topacity: 0.3;\n\t\twidth: 0;\n\t}\n\t100% {\n\t\topacity: 0;\n\t\twidth: 100%;\n\t}\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}