{"ast":null,"code":"/* 网络请求 */\nimport { getSongUrl, likeNowSong, getLikSongList, checkMusic } from \"../../network/playmusic/playmusic.js\";\n/* vuex */\nimport { mapGetters } from \"vuex\";\n/* 格式化时间 */\nimport { formatDuration } from \"../common/formatDuration\";\n/* 随机数 */\nimport { getRandom } from \"../common/getRandom\";\n/* 子组件 */\nimport PlayingList from \"../components/content/player/PlayingList.vue\";\nimport Progress from \"../components/common/Progress.vue\";\nexport default {\n  name: \"app_Footer\",\n  components: {\n    PlayingList,\n    Progress\n  },\n  computed: {\n    ...mapGetters([\"isLogin\", \"userInfo\", \"songUrl\", \"isPlaying\", \"playingList\", \"nowSongDetail\", \"likeSongIds\", \"currentSecond\", \"currentLyric\", \"isShowSongDetail\"]),\n    cover() {\n      return this.nowSongDetail.al.picUrl + \"?param=60y60\";\n    }\n  },\n  data() {\n    return {\n      totalSecond: this.getItem(\"totalSecond\") ? this.getItem(\"totalSecond\") : 0,\n      // 歌曲总秒数\n      totalTime: this.getItem(\"totalTime\") ? this.getItem(\"totalTime\") : \"00:00\",\n      //歌曲总时长(分钟)，从缓存中取，用于刷新后显示\n      currentTime: this.getItem(\"currentTime\") ? this.getItem(\"currentTime\") : \"00:00\",\n      //歌曲当前处于的时间(分钟)，从缓存中取，用于刷新后显示\n      songProgress: this.getItem(\"songProgress\") ? this.getItem(\"songProgress\") : 0,\n      //歌曲时间进度条，从缓存中取，用于刷新后显示\n      voiceProgress: this.getItem(\"voiceProgress\") ? this.getItem(\"voiceProgress\") : 50,\n      //音量进度条，从缓存中取，用于刷新后显示\n      playModel: this.getItem(\"playModel\") ? this.getItem(\"playModel\") : 1,\n      //播放模式\n      nowVolume: 50,\n      //静音前的音量\n      islike: false,\n      //是否喜欢当前播放歌曲\n      showMask: false,\n      //封面遮罩\n      isShowDrawer: false //是否显示播放列表\n    };\n  },\n\n  mounted() {\n    this.$refs.audioplay.volume = this.voiceProgress / 100; // 刷新后设置播放器声音大小为原来设置过的\n    this.pauseMusic();\n    this.isLikeNowSong();\n  },\n  methods: {\n    // 是否显示当前歌曲详情页\n    showSongDetail() {\n      this.$store.commit(\"showSongDetail\");\n    },\n    // 是否显示浮动歌词框\n    showFloatLyric() {\n      this.$store.commit(\"showFloatLyric\");\n    },\n    /*\n    音频标签事件监听\n    */\n    // 播放或者暂停 就到vuex改变当前播放状态\n    changeState(isPlay) {\n      this.$store.dispatch(\"changePlayState\", isPlay);\n    },\n    // 播放音乐\n    playMusic() {\n      if (this.playingList.length == 0) {\n        this.$message({\n          message: \"播放列表为空\",\n          type: \"warning\",\n          center: true\n        });\n      } else {\n        // 赋值audio当前播放歌曲的时间（秒）\n        this.$refs.audioplay.currentTime = this.currentSecond;\n        // 用于歌曲url失效后从新获取\n        if (this.songUrl != \" \") {\n          this.$refs.audioplay.play();\n        } else {\n          getSongUrl(this.nowSongDetail.id).then(res => {\n            // 保存歌曲url\n            this.$store.dispatch(\"saveSongUrl\", res.data.data[0].url);\n          });\n        }\n      }\n    },\n    // 暂停音乐\n    pauseMusic() {\n      this.$refs.audioplay.pause();\n    },\n    // 音频数据加载完后的事件\n    onLoadedmetadata(res) {\n      this.totalSecond = res.target.duration; //获取总秒数\n      this.totalTime = formatDuration(this.totalSecond); //格式化为分钟\n      this.setItem(\"totalTime\", this.totalTime); //缓存总时长分钟，用于刷新后显示\n      this.setItem(\"totalSecond\", this.totalSecond);\n    },\n    // 监听时间的改变\n    onTimeupdate(res) {\n      // 提交歌曲播放的实时秒数 用于歌词的实时滚动\n      this.$store.dispatch(\"saveCurrentSeconds\", res.target.currentTime);\n      // 格式化为分钟\n      this.currentTime = formatDuration(res.target.currentTime);\n      // 缓存当前播放时间（分钟）,用于刷新后显示\n      this.setItem(\"currentTime\", this.currentTime);\n      // 如果没有在拖拽进度条 歌曲当前时间改变后，时间进度条也要改变\n      let songProgress = Math.ceil(res.target.currentTime / this.totalSecond * 100);\n      if (songProgress != Infinity && !isNaN(songProgress)) {\n        // 缓存进度条,用于刷新后恢复\n        this.setItem(\"songProgress\", songProgress);\n        this.songProgress = this.getItem(\"songProgress\");\n      }\n    },\n    // 拖动时间进度条，改变当前时间，len是进度条改变时的回调函数的参数在0-100之间，需要换算成实际时间拖动进度条，\n    changeSongProgress(len) {\n      // this.songProgress = len; //赋值给时间进度条\n      // 直接赋值当前播放秒数，在播放详情页监听时间变化的回调，不能使歌词立即滚动到对应位置，需要在这里直接手动让歌词滚动到对应位置\n      let currentSecond = Math.ceil(len / 100 * this.totalSecond); //当前播放秒数\n      this.$refs.audioplay.currentTime = currentSecond; // 赋值给音频标签当前播放秒数\n      this.currentLyric.forEach((item, index) => {\n        //这里写>=可以立即滚动到对应位置\n        if (currentSecond >= item.time) {\n          this.$store.commit(\"saveCurrentRow\", index); //用于判断当前歌词高亮显示\n          let scrollLyric = document.querySelector(\"#scrollLyric\");\n          scrollLyric.scrollTo({\n            top: 45 * index,\n            behavior: \"smooth\"\n          });\n        }\n      });\n    },\n    // 进度条拖动时，显示当前值,格式化formatTooltip\n    formatTooltip(val) {\n      return formatDuration(val / 100 * this.totalSecond);\n    },\n    /*\n    声音按钮事件\n    */\n    // 静音\n    muteVolume() {\n      this.nowVolume = this.voiceProgress; //先保存当前音量，用于取消静音时恢复\n      this.voiceProgress = 0;\n      this.$refs.audioplay.volume = 0;\n    },\n    // 取消静音\n    cancelMute() {\n      this.voiceProgress = this.nowVolume;\n      this.$refs.audioplay.volume = this.voiceProgress / 100;\n    },\n    // 拖动音量进度条\n    changeVoiceProgress(len) {\n      // this.voiceProgress = len;\n      this.setItem(\"voiceProgress\", len);\n      this.$refs.audioplay.volume = len / 100; //修改音量\n    },\n\n    /*\n    切换歌曲事件\n    */\n    // 获取歌曲url\n    getSongUrlBy(song) {\n      // 先检查歌曲是否可用\n      checkMusic(song.id).then(res => {\n        getSongUrl(song.id).then(res => {\n          // 保存歌曲url\n          this.$store.dispatch(\"saveSongUrl\", res.data.data[0].url);\n          //提交vuex保存当前歌曲详情\n          this.$store.dispatch(\"saveSongDetail\", song);\n        });\n        console.log(res.data);\n      }).catch(err => {\n        // 删除播放列表不能播放的当前歌曲\n        this.$store.dispatch(\"deleteSong\", song.id);\n        this.orderPlay(1);\n        console.log(err);\n      });\n    },\n    // 切歌\n    toggleSong(type) {\n      // 判断播放列表不为空和只有一首歌时\n      if (this.playingList.length == 0) {\n        this.$message({\n          message: \"播放列表为空\",\n          type: \"warning\",\n          center: true\n        });\n        return;\n      } else if (this.playingList.length == 1) {\n        this.$message({\n          message: \"当前播放列表只有一首歌\",\n          type: \"warning\",\n          center: true\n        });\n        this.playMusic();\n      } else {\n        // 再根据播放模式判断\n        if (this.playModel === 1 || this.playModel === 3) {\n          // 顺序播放 type等于0上一曲 否则下一曲\n          this.orderPlay(type);\n        } else if (this.playModel === 2) {\n          // 随机播放\n          this.randomPlay();\n        }\n      }\n    },\n    /*\n    播放模式\n    */\n    // 切换播放模式事件\n    changePlayModel(model) {\n      // 先关闭循环播放\n      this.$refs.audioplay.loop = false;\n      this.playModel = model;\n      this.setItem(\"playModel\", model);\n    },\n    //.1 顺序模式\n    orderPlay(type) {\n      // 找到当前歌曲在播放列表的索引\n      let nowIndex = this.playingList.findIndex(item => this.nowSongDetail.id == item.id);\n      let toggleIndex;\n      // type等于0 是上一曲 否则下一曲\n      // 根据当前歌曲索引来判断要切换的歌曲索引\n      switch (nowIndex) {\n        case -1:\n          toggleIndex = 0;\n          break;\n        case 0:\n          toggleIndex = type === 0 ? this.playingList.length - 1 : nowIndex + 1;\n          break;\n        case this.playingList.length - 1:\n          toggleIndex = type === 0 ? nowIndex - 1 : 0;\n          break;\n        default:\n          toggleIndex = type === 0 ? nowIndex - 1 : nowIndex + 1;\n          break;\n      }\n      let togglesong = this.playingList[toggleIndex];\n      this.getSongUrlBy(togglesong);\n    },\n    //.2随机模式\n    randomPlay() {\n      // 获得一个随机索引号\n      let randomIndex = getRandom(0, this.playingList.length - 1);\n      // 根据随机索引号拿到随机歌曲\n      let randomSong = this.playingList[randomIndex];\n      // 获取歌曲url\n      this.getSongUrlBy(randomSong);\n    },\n    //.3 单曲循环\n    loopPlay() {\n      // 把音频标签的loop设为true\n      this.$refs.audioplay.loop = true;\n      this.$refs.audioplay.play();\n    },\n    /*\n    喜欢当前播放歌曲\n    */\n\n    // 获取喜欢的歌曲id列表\n    getLikSongListBy() {\n      getLikSongList(this.userInfo.userId).then(res => {\n        this.$store.dispatch(\"saveLikeSongIds\", res.data.ids);\n        this.islike = this.likeSongIds.includes(this.nowSongDetail.id);\n      });\n    },\n    // 判断是否在喜欢的歌曲id列表中\n    // 判断用户登录状态和喜欢的歌曲id列表是否为空\n    isLikeNowSong() {\n      //没有登录直接为false\n      if (!this.isLogin) {\n        this.islike = false;\n        return;\n      } else if (this.likeSongIds.length != 0) {\n        // 喜欢的音乐id列表不为空直接判断\n        this.islike = this.likeSongIds.includes(this.nowSongDetail.id);\n      } else {\n        // 如果登录了 音乐id列表还为空的话从新获取喜欢的音乐id列表\n        this.getLikSongListBy();\n      }\n    },\n    // 点击喜欢按钮的回调\n    likeNowSongBy() {\n      // 先判断登录状态\n      if (!this.$store.state.isLogin) {\n        this.$message({\n          type: \"warning\",\n          message: \"登录后才能收藏\",\n          showClose: true,\n          center: true\n        });\n        return;\n      }\n      let like = this.islike ? false : true;\n      likeNowSong(this.nowSongDetail.id, like).then(res => {\n        // 从新获取喜欢的音乐id列表\n        this.getLikSongListBy();\n        if (like == true) {\n          this.$message({\n            message: \"已添加到我喜欢的音乐\",\n            type: \"success\",\n            center: true\n          });\n        } else {\n          this.$message({\n            message: \"取消喜欢成功\",\n            type: \"success\",\n            center: true\n          });\n        }\n        console.log(res);\n      });\n    },\n    // 点击下载按钮的回调\n    downloadCurrentMusic() {\n      let downloadMusicInfo = {\n        url: this.songUrl,\n        name: this.nowSongDetail.name + \" - \" + this.nowSongDetail.ar[0].name\n      };\n      this.$store.commit(\"updateDownloadMusicInfo\", downloadMusicInfo);\n    }\n  },\n  watch: {\n    // 监听当前歌曲变化\n    nowSongDetail() {\n      this.isLikeNowSong();\n    },\n    // 监听喜欢的音乐列表变化\n    likeSongIds() {\n      this.isLikeNowSong();\n    },\n    playingList(newPlayingList) {\n      // 清空播放列表时重置歌曲进度条和总时长\n      if (newPlayingList.length == 0) {\n        this.removeItem(\"songProgress\");\n        this.songProgress = 0;\n        this.removeItem(\"totalTime\");\n        this.totalTime = \"00:00\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["getSongUrl","likeNowSong","getLikSongList","checkMusic","mapGetters","formatDuration","getRandom","PlayingList","Progress","name","components","computed","cover","nowSongDetail","al","picUrl","data","totalSecond","getItem","totalTime","currentTime","songProgress","voiceProgress","playModel","nowVolume","islike","showMask","isShowDrawer","mounted","$refs","audioplay","volume","pauseMusic","isLikeNowSong","methods","showSongDetail","$store","commit","showFloatLyric","changeState","isPlay","dispatch","playMusic","playingList","length","$message","message","type","center","currentSecond","songUrl","play","id","then","res","url","pause","onLoadedmetadata","target","duration","setItem","onTimeupdate","Math","ceil","Infinity","isNaN","changeSongProgress","len","currentLyric","forEach","item","index","time","scrollLyric","document","querySelector","scrollTo","top","behavior","formatTooltip","val","muteVolume","cancelMute","changeVoiceProgress","getSongUrlBy","song","console","log","catch","err","orderPlay","toggleSong","randomPlay","changePlayModel","model","loop","nowIndex","findIndex","toggleIndex","togglesong","randomIndex","randomSong","loopPlay","getLikSongListBy","userInfo","userId","ids","likeSongIds","includes","isLogin","likeNowSongBy","state","showClose","like","downloadCurrentMusic","downloadMusicInfo","ar","watch","newPlayingList","removeItem"],"sources":["src/layout/Footer.vue"],"sourcesContent":["<template>\n\t<div id=\"footer\">\n\t\t<div class=\"player\">\n\t\t\t<!-- 音频标签 -->\n\t\t\t<audio\n\t\t\t\tid=\"audio\"\n\t\t\t\tautoplay\n\t\t\t\t:src=\"songUrl\"\n\t\t\t\tref=\"audioplay\"\n\t\t\t\t@play=\"changeState(true)\"\n\t\t\t\t@pause=\"changeState(false)\"\n\t\t\t\t@loadedmetadata=\"onLoadedmetadata\"\n\t\t\t\t@timeupdate=\"onTimeupdate\"\n\t\t\t\t@ended=\"playModel == 3 ? loopPlay() : toggleSong(1)\"\n\t\t\t></audio>\n\t\t\t<!-- 左侧歌曲封面 名字 -->\n\t\t\t<div class=\"left-cover-content\">\n\t\t\t\t<!-- 有音乐时 -->\n\t\t\t\t<div class=\"cover-content\" v-if=\"Object.keys(nowSongDetail).length !== 0\">\n\t\t\t\t\t<div class=\"cover\" @click=\"showSongDetail\" @mouseenter=\"showMask = true\" @mouseleave=\"showMask = false\">\n\t\t\t\t\t\t<transition name=\"el-fade-in-linear\">\n\t\t\t\t\t\t\t<div class=\"mask-playicon\" v-show=\"showMask\" style=\"cursor: pointer; background: transparent\">\n\t\t\t\t\t\t\t\t<span :class=\"!isShowSongDetail ? 'iconfont icon-xiangshangjiantou' : 'iconfont icon-down-arrow'\"></span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</transition>\n\t\t\t\t\t\t<img :src=\"cover\" alt=\"\" :class=\"{ blur: showMask }\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"songname\">\n\t\t\t\t\t\t<p style=\"padding-bottom: 5px\">{{ nowSongDetail.name }}</p>\n\t\t\t\t\t\t<p class=\"by\">{{ nowSongDetail.ar[0].name }}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<!-- 喜欢该歌曲 -->\n\t\t\t\t\t<div class=\"like-song\" @click=\"likeNowSongBy\">\n\t\t\t\t\t\t<span :class=\"islike ? 'iconfont icon-xihuan2' : 'iconfont icon-xihuan'\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"download\" @click=\"downloadCurrentMusic\" title=\"下载\">\n\t\t\t\t\t\t<span class=\"iconfont icon-xiazai\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<!-- 没有音乐时 -->\n\t\t\t\t<div class=\"cover-content\" v-if=\"Object.keys(nowSongDetail).length == 0\" @click=\"showSongDetail\">\n\t\t\t\t\t<div class=\"cover\">\n\t\t\t\t\t\t<span class=\"iconfont icon-yinleyanzou\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"songname\">暂无音乐</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<!-- 中间播放控制 -->\n\t\t\t<div class=\"cneter-play-song\">\n\t\t\t\t<!-- 播放控制按钮 -->\n\t\t\t\t<div class=\"change-play\">\n\t\t\t\t\t<!-- 上一曲 -->\n\t\t\t\t\t<span class=\"change-box\" @click=\"toggleSong(0)\">\n\t\t\t\t\t\t<i class=\"iconfont icon-shangyiqu\"></i>\n\t\t\t\t\t</span>\n\t\t\t\t\t<!-- 播放 暂停 -->\n\t\t\t\t\t<span class=\"play-box\" v-if=\"!isPlaying\" @click=\"playMusic\">\n\t\t\t\t\t\t<i class=\"iconfont icon-play\"></i>\n\t\t\t\t\t</span>\n\t\t\t\t\t<span class=\"play-box\" v-else @click=\"pauseMusic\">\n\t\t\t\t\t\t<i class=\"iconfont icon-pause\"></i>\n\t\t\t\t\t</span>\n\t\t\t\t\t<!-- 下一曲 -->\n\t\t\t\t\t<span class=\"change-box\" @click=\"toggleSong(1)\">\n\t\t\t\t\t\t<i class=\"iconfont icon-xiayiqu\"></i>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<!-- 歌曲进度条 -->\n\t\t\t\t<div class=\"song-progress\">\n\t\t\t\t\t<!-- 当前歌曲时间 -->\n\t\t\t\t\t<span style=\"cursor: auto\">{{ currentTime }}</span>\n\t\t\t\t\t<!-- 进度条 -->\n\t\t\t\t\t<div class=\"s-progress\">\n\t\t\t\t\t\t<!-- <el-slider v-model=\"songProgress\" :format-tooltip=\"formatTooltip\" :disabled=\"playingList.length == 0\" @change=\"changeSongProgress\" :is-format-tooltip=\"true\"></el-slider> -->\n\t\t\t\t\t\t<Progress\n\t\t\t\t\t\t\tv-model=\"songProgress\"\n\t\t\t\t\t\t\t@onChange=\"changeSongProgress\"\n\t\t\t\t\t\t\t:is-format-tooltip=\"true\"\n\t\t\t\t\t\t\t:format-tooltip=\"formatTooltip\"\n\t\t\t\t\t\t\t:showRadiusBtn=\"false\"\n\t\t\t\t\t\t\t:disabled=\"playingList.length == 0\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<!-- 总时长 -->\n\t\t\t\t\t<span style=\"cursor: auto\">{{ totalTime }}</span>\n\t\t\t\t</div>\n\t\t\t\t<!-- 切换播放模式 -->\n\t\t\t\t<div class=\"playmodel\">\n\t\t\t\t\t<el-tooltip effect=\"dark\" content=\"顺序播放\" placement=\"top\" v-if=\"playModel == 1\">\n\t\t\t\t\t\t<span class=\"iconfont icon-orderplay\" v-if=\"playModel == 1\" @click=\"changePlayModel(2)\"></span>\n\t\t\t\t\t</el-tooltip>\n\t\t\t\t\t<el-tooltip effect=\"dark\" content=\"随机播放\" placement=\"top\" v-if=\"playModel == 2\">\n\t\t\t\t\t\t<span class=\"iconfont icon-random\" v-if=\"playModel == 2\" @click=\"changePlayModel(3)\"></span>\n\t\t\t\t\t</el-tooltip>\n\t\t\t\t\t<el-tooltip effect=\"dark\" content=\"单曲循环\" placement=\"top\" v-if=\"playModel == 3\">\n\t\t\t\t\t\t<span class=\"iconfont icon-danqu\" v-if=\"playModel == 3\" @click=\"changePlayModel(1)\"></span>\n\t\t\t\t\t</el-tooltip>\n\t\t\t\t\t<span class=\"iconfont icon-cibiaoquanyi\" @click=\"showFloatLyric\"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<!-- 右侧声音控制 -->\n\t\t\t<div class=\"right-voice\">\n\t\t\t\t<!-- 静音按钮 -->\n\t\t\t\t<span>\n\t\t\t\t\t<i class=\"iconfont icon-jingyin\" @click=\"cancelMute\" v-if=\"voiceProgress == 0\"></i>\n\t\t\t\t\t<i class=\"iconfont icon-laba\" @click=\"muteVolume\" v-else></i>\n\t\t\t\t</span>\n\t\t\t\t<!-- 声音进度条 -->\n\t\t\t\t<div class=\"v-progress\">\n\t\t\t\t\t<!-- <el-slider v-model=\"voiceProgress\" @change=\"changeVoiceProgress\"></el-slider> -->\n\t\t\t\t\t<Progress v-model=\"voiceProgress\" @onChange=\"changeVoiceProgress\" :showRadiusBtn=\"false\" :isActiveBar=\"false\" />\n\t\t\t\t</div>\n\t\t\t\t<!-- 播放列表按钮 -->\n\t\t\t\t<el-tooltip effect=\"dark\" content=\"播放列表\" placement=\"top\">\n\t\t\t\t\t<span class=\"iconfont icon-songplaylist\" @click=\"isShowDrawer = !isShowDrawer\"></span>\n\t\t\t\t</el-tooltip>\n\t\t\t</div>\n\t\t\t<!-- 当前播放列表 -->\n\t\t\t<transition name=\"playlist\">\n\t\t\t\t<PlayingList v-if=\"isShowDrawer\" @closePlayList=\"isShowDrawer = false\" />\n\t\t\t</transition>\n\t\t</div>\n\t</div>\n</template>\n<script>\n/* 网络请求 */\nimport { getSongUrl, likeNowSong, getLikSongList, checkMusic } from \"../../network/playmusic/playmusic.js\";\n/* vuex */\nimport { mapGetters } from \"vuex\";\n/* 格式化时间 */\nimport { formatDuration } from \"../common/formatDuration\";\n/* 随机数 */\nimport { getRandom } from \"../common/getRandom\";\n/* 子组件 */\nimport PlayingList from \"../components/content/player/PlayingList.vue\";\nimport Progress from \"../components/common/Progress.vue\";\nexport default {\n\tname: \"app_Footer\",\n\tcomponents: { PlayingList, Progress },\n\tcomputed: {\n\t\t...mapGetters([\n\t\t\t\"isLogin\",\n\t\t\t\"userInfo\",\n\t\t\t\"songUrl\",\n\t\t\t\"isPlaying\",\n\t\t\t\"playingList\",\n\t\t\t\"nowSongDetail\",\n\t\t\t\"likeSongIds\",\n\t\t\t\"currentSecond\",\n\t\t\t\"currentLyric\",\n\t\t\t\"isShowSongDetail\",\n\t\t]),\n\t\tcover() {\n\t\t\treturn this.nowSongDetail.al.picUrl + \"?param=60y60\";\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\ttotalSecond: this.getItem(\"totalSecond\") ? this.getItem(\"totalSecond\") : 0, // 歌曲总秒数\n\t\t\ttotalTime: this.getItem(\"totalTime\") ? this.getItem(\"totalTime\") : \"00:00\", //歌曲总时长(分钟)，从缓存中取，用于刷新后显示\n\t\t\tcurrentTime: this.getItem(\"currentTime\") ? this.getItem(\"currentTime\") : \"00:00\", //歌曲当前处于的时间(分钟)，从缓存中取，用于刷新后显示\n\t\t\tsongProgress: this.getItem(\"songProgress\") ? this.getItem(\"songProgress\") : 0, //歌曲时间进度条，从缓存中取，用于刷新后显示\n\t\t\tvoiceProgress: this.getItem(\"voiceProgress\") ? this.getItem(\"voiceProgress\") : 50, //音量进度条，从缓存中取，用于刷新后显示\n\t\t\tplayModel: this.getItem(\"playModel\") ? this.getItem(\"playModel\") : 1, //播放模式\n\t\t\tnowVolume: 50, //静音前的音量\n\t\t\tislike: false, //是否喜欢当前播放歌曲\n\t\t\tshowMask: false, //封面遮罩\n\t\t\tisShowDrawer: false, //是否显示播放列表\n\t\t};\n\t},\n\tmounted() {\n\t\tthis.$refs.audioplay.volume = this.voiceProgress / 100; // 刷新后设置播放器声音大小为原来设置过的\n\t\tthis.pauseMusic();\n\t\tthis.isLikeNowSong();\n\t},\n\tmethods: {\n\t\t// 是否显示当前歌曲详情页\n\t\tshowSongDetail() {\n\t\t\tthis.$store.commit(\"showSongDetail\");\n\t\t},\n\t\t// 是否显示浮动歌词框\n\t\tshowFloatLyric() {\n\t\t\tthis.$store.commit(\"showFloatLyric\");\n\t\t},\n\n\t\t/*\n\t\t音频标签事件监听\n\t\t*/\n\t\t// 播放或者暂停 就到vuex改变当前播放状态\n\t\tchangeState(isPlay) {\n\t\t\tthis.$store.dispatch(\"changePlayState\", isPlay);\n\t\t},\n\t\t// 播放音乐\n\t\tplayMusic() {\n\t\t\tif (this.playingList.length == 0) {\n\t\t\t\tthis.$message({\n\t\t\t\t\tmessage: \"播放列表为空\",\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tcenter: true,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// 赋值audio当前播放歌曲的时间（秒）\n\t\t\t\tthis.$refs.audioplay.currentTime = this.currentSecond;\n\t\t\t\t// 用于歌曲url失效后从新获取\n\t\t\t\tif (this.songUrl != \" \") {\n\t\t\t\t\tthis.$refs.audioplay.play();\n\t\t\t\t} else {\n\t\t\t\t\tgetSongUrl(this.nowSongDetail.id).then(res => {\n\t\t\t\t\t\t// 保存歌曲url\n\t\t\t\t\t\tthis.$store.dispatch(\"saveSongUrl\", res.data.data[0].url);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// 暂停音乐\n\t\tpauseMusic() {\n\t\t\tthis.$refs.audioplay.pause();\n\t\t},\n\t\t// 音频数据加载完后的事件\n\t\tonLoadedmetadata(res) {\n\t\t\tthis.totalSecond = res.target.duration; //获取总秒数\n\t\t\tthis.totalTime = formatDuration(this.totalSecond); //格式化为分钟\n\t\t\tthis.setItem(\"totalTime\", this.totalTime); //缓存总时长分钟，用于刷新后显示\n\t\t\tthis.setItem(\"totalSecond\", this.totalSecond);\n\t\t},\n\t\t// 监听时间的改变\n\t\tonTimeupdate(res) {\n\t\t\t// 提交歌曲播放的实时秒数 用于歌词的实时滚动\n\t\t\tthis.$store.dispatch(\"saveCurrentSeconds\", res.target.currentTime);\n\t\t\t// 格式化为分钟\n\t\t\tthis.currentTime = formatDuration(res.target.currentTime);\n\t\t\t// 缓存当前播放时间（分钟）,用于刷新后显示\n\t\t\tthis.setItem(\"currentTime\", this.currentTime);\n\t\t\t// 如果没有在拖拽进度条 歌曲当前时间改变后，时间进度条也要改变\n\t\t\tlet songProgress = Math.ceil((res.target.currentTime / this.totalSecond) * 100);\n\t\t\tif (songProgress != Infinity && !isNaN(songProgress)) {\n\t\t\t\t// 缓存进度条,用于刷新后恢复\n\t\t\t\tthis.setItem(\"songProgress\", songProgress);\n\t\t\t\tthis.songProgress = this.getItem(\"songProgress\");\n\t\t\t}\n\t\t},\n\t\t// 拖动时间进度条，改变当前时间，len是进度条改变时的回调函数的参数在0-100之间，需要换算成实际时间拖动进度条，\n\t\tchangeSongProgress(len) {\n\t\t\t// this.songProgress = len; //赋值给时间进度条\n\t\t\t// 直接赋值当前播放秒数，在播放详情页监听时间变化的回调，不能使歌词立即滚动到对应位置，需要在这里直接手动让歌词滚动到对应位置\n\t\t\tlet currentSecond = Math.ceil((len / 100) * this.totalSecond); //当前播放秒数\n\t\t\tthis.$refs.audioplay.currentTime = currentSecond; // 赋值给音频标签当前播放秒数\n\t\t\tthis.currentLyric.forEach((item, index) => {\n\t\t\t\t//这里写>=可以立即滚动到对应位置\n\t\t\t\tif (currentSecond >= item.time) {\n\t\t\t\t\tthis.$store.commit(\"saveCurrentRow\", index); //用于判断当前歌词高亮显示\n\t\t\t\t\tlet scrollLyric = document.querySelector(\"#scrollLyric\");\n\t\t\t\t\tscrollLyric.scrollTo({\n\t\t\t\t\t\ttop: 45 * index,\n\t\t\t\t\t\tbehavior: \"smooth\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t// 进度条拖动时，显示当前值,格式化formatTooltip\n\t\tformatTooltip(val) {\n\t\t\treturn formatDuration((val / 100) * this.totalSecond);\n\t\t},\n\n\t\t/*\n\t\t声音按钮事件\n\t\t*/\n\t\t// 静音\n\t\tmuteVolume() {\n\t\t\tthis.nowVolume = this.voiceProgress; //先保存当前音量，用于取消静音时恢复\n\t\t\tthis.voiceProgress = 0;\n\t\t\tthis.$refs.audioplay.volume = 0;\n\t\t},\n\t\t// 取消静音\n\t\tcancelMute() {\n\t\t\tthis.voiceProgress = this.nowVolume;\n\t\t\tthis.$refs.audioplay.volume = this.voiceProgress / 100;\n\t\t},\n\t\t// 拖动音量进度条\n\t\tchangeVoiceProgress(len) {\n\t\t\t// this.voiceProgress = len;\n\t\t\tthis.setItem(\"voiceProgress\", len);\n\t\t\tthis.$refs.audioplay.volume = len / 100; //修改音量\n\t\t},\n\n\t\t/*\n\t\t切换歌曲事件\n\t\t*/\n\t\t// 获取歌曲url\n\t\tgetSongUrlBy(song) {\n\t\t\t// 先检查歌曲是否可用\n\t\t\tcheckMusic(song.id)\n\t\t\t\t.then(res => {\n\t\t\t\t\tgetSongUrl(song.id).then(res => {\n\t\t\t\t\t\t// 保存歌曲url\n\t\t\t\t\t\tthis.$store.dispatch(\"saveSongUrl\", res.data.data[0].url);\n\t\t\t\t\t\t//提交vuex保存当前歌曲详情\n\t\t\t\t\t\tthis.$store.dispatch(\"saveSongDetail\", song);\n\t\t\t\t\t});\n                    console.log(res.data)\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\t// 删除播放列表不能播放的当前歌曲\n\t\t\t\t\tthis.$store.dispatch(\"deleteSong\", song.id);\n\t\t\t\t\tthis.orderPlay(1);\n                    console.log(err)\n\t\t\t\t});\n\t\t},\n\n\t\t// 切歌\n\t\ttoggleSong(type) {\n\t\t\t// 判断播放列表不为空和只有一首歌时\n\t\t\tif (this.playingList.length == 0) {\n\t\t\t\tthis.$message({\n\t\t\t\t\tmessage: \"播放列表为空\",\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tcenter: true,\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} else if (this.playingList.length == 1) {\n\t\t\t\tthis.$message({\n\t\t\t\t\tmessage: \"当前播放列表只有一首歌\",\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tcenter: true,\n\t\t\t\t});\n\t\t\t\tthis.playMusic();\n\t\t\t} else {\n\t\t\t\t// 再根据播放模式判断\n\t\t\t\tif (this.playModel === 1 || this.playModel === 3) {\n\t\t\t\t\t// 顺序播放 type等于0上一曲 否则下一曲\n\t\t\t\t\tthis.orderPlay(type);\n\t\t\t\t} else if (this.playModel === 2) {\n\t\t\t\t\t// 随机播放\n\t\t\t\t\tthis.randomPlay();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t播放模式\n\t\t*/\n\t\t// 切换播放模式事件\n\t\tchangePlayModel(model) {\n\t\t\t// 先关闭循环播放\n\t\t\tthis.$refs.audioplay.loop = false;\n\t\t\tthis.playModel = model;\n\t\t\tthis.setItem(\"playModel\", model);\n\t\t},\n\t\t//.1 顺序模式\n\t\torderPlay(type) {\n\t\t\t// 找到当前歌曲在播放列表的索引\n\t\t\tlet nowIndex = this.playingList.findIndex(item => this.nowSongDetail.id == item.id);\n\t\t\tlet toggleIndex;\n\t\t\t// type等于0 是上一曲 否则下一曲\n\t\t\t// 根据当前歌曲索引来判断要切换的歌曲索引\n\t\t\tswitch (nowIndex) {\n\t\t\t\tcase -1:\n\t\t\t\t\ttoggleIndex = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0:\n\t\t\t\t\ttoggleIndex = type === 0 ? this.playingList.length - 1 : nowIndex + 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.playingList.length - 1:\n\t\t\t\t\ttoggleIndex = type === 0 ? nowIndex - 1 : 0;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttoggleIndex = type === 0 ? nowIndex - 1 : nowIndex + 1;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet togglesong = this.playingList[toggleIndex];\n\t\t\tthis.getSongUrlBy(togglesong);\n\t\t},\n\t\t//.2随机模式\n\t\trandomPlay() {\n\t\t\t// 获得一个随机索引号\n\t\t\tlet randomIndex = getRandom(0, this.playingList.length - 1);\n\t\t\t// 根据随机索引号拿到随机歌曲\n\t\t\tlet randomSong = this.playingList[randomIndex];\n\t\t\t// 获取歌曲url\n\t\t\tthis.getSongUrlBy(randomSong);\n\t\t},\n\t\t//.3 单曲循环\n\t\tloopPlay() {\n\t\t\t// 把音频标签的loop设为true\n\t\t\tthis.$refs.audioplay.loop = true;\n\t\t\tthis.$refs.audioplay.play();\n\t\t},\n\n\t\t/*\n\t\t喜欢当前播放歌曲\n\t\t*/\n\n\t\t// 获取喜欢的歌曲id列表\n\t\tgetLikSongListBy() {\n\t\t\tgetLikSongList(this.userInfo.userId).then(res => {\n\t\t\t\tthis.$store.dispatch(\"saveLikeSongIds\", res.data.ids);\n\t\t\t\tthis.islike = this.likeSongIds.includes(this.nowSongDetail.id);\n\t\t\t});\n\t\t},\n\t\t// 判断是否在喜欢的歌曲id列表中\n\t\t// 判断用户登录状态和喜欢的歌曲id列表是否为空\n\t\tisLikeNowSong() {\n\t\t\t//没有登录直接为false\n\t\t\tif (!this.isLogin) {\n\t\t\t\tthis.islike = false;\n\t\t\t\treturn;\n\t\t\t} else if (this.likeSongIds.length != 0) {\n\t\t\t\t// 喜欢的音乐id列表不为空直接判断\n\t\t\t\tthis.islike = this.likeSongIds.includes(this.nowSongDetail.id);\n\t\t\t} else {\n\t\t\t\t// 如果登录了 音乐id列表还为空的话从新获取喜欢的音乐id列表\n\t\t\t\tthis.getLikSongListBy();\n\t\t\t}\n\t\t},\n\t\t// 点击喜欢按钮的回调\n\t\tlikeNowSongBy() {\n\t\t\t// 先判断登录状态\n\t\t\tif (!this.$store.state.isLogin) {\n\t\t\t\tthis.$message({\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tmessage: \"登录后才能收藏\",\n\t\t\t\t\tshowClose: true,\n\t\t\t\t\tcenter: true,\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet like = this.islike ? false : true;\n\t\t\tlikeNowSong(this.nowSongDetail.id, like).then(res => {\n\t\t\t\t// 从新获取喜欢的音乐id列表\n\t\t\t\tthis.getLikSongListBy();\n\t\t\t\tif (like == true) {\n\t\t\t\t\tthis.$message({\n\t\t\t\t\t\tmessage: \"已添加到我喜欢的音乐\",\n\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.$message({\n\t\t\t\t\t\tmessage: \"取消喜欢成功\",\n\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t});\n\t\t\t\t}\n                console.log(res)\n\t\t\t});\n\t\t},\n\t\t// 点击下载按钮的回调\n\t\tdownloadCurrentMusic() {\n\t\t\tlet downloadMusicInfo = {\n\t\t\t\turl: this.songUrl,\n\t\t\t\tname: this.nowSongDetail.name + \" - \" + this.nowSongDetail.ar[0].name,\n\t\t\t};\n\t\t\tthis.$store.commit(\"updateDownloadMusicInfo\", downloadMusicInfo);\n\t\t},\n\t},\n\twatch: {\n\t\t// 监听当前歌曲变化\n\t\tnowSongDetail() {\n\t\t\tthis.isLikeNowSong();\n\t\t},\n\t\t// 监听喜欢的音乐列表变化\n\t\tlikeSongIds() {\n\t\t\tthis.isLikeNowSong();\n\t\t},\n\t\tplayingList(newPlayingList) {\n\t\t\t// 清空播放列表时重置歌曲进度条和总时长\n\t\t\tif (newPlayingList.length == 0) {\n\t\t\t\tthis.removeItem(\"songProgress\");\n\t\t\t\tthis.songProgress = 0;\n\t\t\t\tthis.removeItem(\"totalTime\");\n\t\t\t\tthis.totalTime = \"00:00\";\n\t\t\t}\n\t\t},\n\t},\n};\n</script>\n\n<style lang=\"less\" scoped>\n#footer {\n\twidth: 100%;\n\tposition: fixed;\n\tbottom: 0px;\n\theight: 70px;\n\tz-index: 999;\n\tbackground: #f8f8ff;\n\tborder-top: 1px solid #dddddd;\n}\n.player {\n\tdisplay: flex;\n\talign-items: center;\n\theight: 100%;\n\twidth: 98%;\n\tmargin: 0 auto;\n\t// 左侧封面\n\t.left-cover-content {\n\t\twidth: 15%;\n\t\t.cover-content {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\t.cover {\n\t\t\t\tposition: relative;\n\t\t\t\twidth: 60px;\n\n\t\t\t\timg {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\t\t\t\t.blur {\n\t\t\t\t\tfilter: blur(3px) brightness(80%);\n\t\t\t\t}\n\t\t\t\t.icon-xiangshangjiantou,\n\t\t\t\t.icon-down-arrow {\n\t\t\t\t\tfont-size: 22px;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\tfont-weight: 700;\n\t\t\t\t}\n\t\t\t\t.icon-yinleyanzou {\n\t\t\t\t\tfont-size: 34px;\n\t\t\t\t\tcolor: var(--themeColor);\n\t\t\t\t}\n\t\t\t}\n\t\t\t.songname {\n\t\t\t\tmargin-left: 10px;\n\t\t\t\tp {\n\t\t\t\t\twidth: 100px;\n\t\t\t\t\twhite-space: nowrap;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t\ttext-overflow: ellipsis;\n\t\t\t\t}\n\t\t\t}\n\t\t\t.like-song {\n\t\t\t\t.icon-xihuan {\n\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\tfont-weight: 700;\n\t\t\t\t\t&:hover {\n\t\t\t\t\t\tcolor: var(--themeColor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.icon-xihuan2 {\n\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\tcolor: var(--themeColor);\n\t\t\t\t}\n\t\t\t}\n\t\t\t.download {\n\t\t\t\tpadding-left: 10px;\n\t\t\t\t.icon-xiazai {\n\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\tfont-weight: 700;\n\t\t\t\t\t&:hover {\n\t\t\t\t\t\tcolor: var(--themeColor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// 中间播放控制\n\t.cneter-play-song {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmargin-left: 20px;\n\t\t.change-play {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\twidth: 15%;\n\t\t\t.change-box,\n\t\t\t.play-box {\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\t\t\t\tcolor: #fff;\n\t\t\t\tbackground: var(--themeRgba);\n\t\t\t\tborder-radius: 50%;\n\t\t\t\t&:hover {\n\t\t\t\t\tbackground: var(--themeColor);\n\t\t\t\t}\n\t\t\t}\n\t\t\t.change-box {\n\t\t\t\twidth: 30px;\n\t\t\t\theight: 30px;\n\t\t\t\tmargin: 0 10px;\n\t\t\t}\n\t\t\t.play-box {\n\t\t\t\twidth: 42px;\n\t\t\t\theight: 42px;\n\t\t\t\tpadding-left: 2px;\n\t\t\t}\n\t\t\t.icon-shangyiqu,\n\t\t\t.icon-xiayiqu {\n\t\t\t\tfont-size: 18px;\n\t\t\t}\n\t\t\t.icon-play,\n\t\t\t.icon-pause {\n\t\t\t\tfont-size: 22px;\n\t\t\t}\n\t\t}\n\t\t.song-progress {\n\t\t\tflex: 1;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\theight: 70px;\n\t\t\tspan {\n\t\t\t\tpadding: 0 10px;\n\t\t\t}\n\t\t\t.s-progress {\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t}\n\t\t.playmodel {\n\t\t\tdisplay: flex;\n\t\t\twidth: 8%;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tspan {\n\t\t\t\twidth: 25px;\n\t\t\t\tmargin: 0 5px;\n\t\t\t\t&:hover {\n\t\t\t\t\tcolor: var(--themeColor);\n\t\t\t\t}\n\t\t\t}\n\t\t\t.icon-orderplay,\n\t\t\t.icon-random {\n\t\t\t\tfont-size: 18px;\n\t\t\t\tfont-weight: 700;\n\t\t\t}\n\t\t\t.icon-danqu,\n\t\t\t.icon-cibiaoquanyi {\n\t\t\t\tfont-weight: 700;\n\t\t\t}\n\t\t}\n\t}\n\t// 右侧声音控制\n\t.right-voice {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-end;\n\t\twidth: 15%;\n\t\t.icon-laba,\n\t\t.icon-jingyin {\n\t\t\tfont-size: 20px;\n\t\t\tfont-weight: 700;\n\t\t\tpadding-right: 10px;\n\t\t}\n\t\t.icon-songplaylist {\n\t\t\tfont-size: 18px;\n\t\t\tpadding-left: 10px;\n\t\t}\n\t\t.v-progress {\n\t\t\twidth: 60%;\n\t\t}\n\t\tspan {\n\t\t\tcursor: pointer;\n\t\t\t&:hover {\n\t\t\t\tcolor: var(--themeColor);\n\t\t\t}\n\t\t}\n\t}\n\tspan {\n\t\tcursor: pointer;\n\t}\n}\n\n// 播放列表动画\n.playlist-enter,\n.playlist-leave-to {\n\ttransform: translateX(100%);\n}\n.playlist-enter-active,\n.playlist-leave-active {\n\ttransition: all 0.6s;\n}\n.playlist-enter-to {\n\ttransform: translateX(0);\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}