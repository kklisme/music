{"ast":null,"code":"/* 网络请求 */\nimport { getSingerDetail, getSingerHotSong, getSingerAlbum, getSingerMv, getSingerSimilar, subSinger } from \"../../../network/singerdetail/singerdetail\";\nimport { getSubSinger } from \"../../../network/myfavorite/myfavorite\";\n/* vuex */\nimport { mapGetters } from \"vuex\";\n/* 子组件 */\nimport SingerInfo from \"./Childcomps/SingerInfo.vue\";\nimport SingerAlbum from \"./Childcomps/SingerAlbum.vue\";\nimport SingerHotsong from \"./Childcomps/SingerHotsong.vue\";\nimport SingerMv from \"./Childcomps/SingerMv.vue\";\nimport SingerSimilar from \"./Childcomps/SingerSimilar.vue\";\nexport default {\n  inject: [\"reload\"],\n  name: \"app_Singerdetail\",\n  components: {\n    SingerInfo,\n    SingerAlbum,\n    SingerHotsong,\n    SingerMv,\n    SingerSimilar\n  },\n  computed: {\n    ...mapGetters([\"subSingerlist\"])\n  },\n  data() {\n    return {\n      id: \"\",\n      //歌手id\n      singerInfo: {},\n      //歌手基本信息\n      albumSize: 0,\n      //专辑数量\n      singerHomeId: {},\n      hotsong: [],\n      //歌手热门歌曲\n      albumlist: [],\n      //歌手专辑列表\n      mvlist: [],\n      //歌手mv列表\n      similarlist: [],\n      //相似歌手\n      isSub: false //是否收藏了当前歌手\n    };\n  },\n\n  created() {\n    // 保存歌手id\n    this.id = this.$route.params.id;\n    // 根据歌手id获取歌手基本信息\n    this.getSingerDetailBy();\n    // 默认获取歌手第一页 30张专辑\n    this.getSingerAlbumBy();\n    // 获取用户收藏的歌手\n    if (this.subSingerlist.length == 0) {\n      this.getUserSubSinger();\n      return;\n    }\n    // 判断是否收藏了当前歌手\n    this.isSubSinger();\n  },\n  methods: {\n    /* \n    网络请求\n    */\n    // 根据歌手id获取歌手基本信息\n    getSingerDetailBy() {\n      getSingerDetail(this.id).then(res => {\n        // 如果该歌手有用户id就保存起来\n        if (res.data.data.user) {\n          res.data.data.artist.userId = res.data.data.user.userId;\n          this.singerInfo = res.data.data.artist;\n          this.albumSize = res.data.data.artist.albumSize;\n        } else {\n          this.singerInfo = res.data.data.artist;\n          this.albumSize = res.data.data.artist.albumSize;\n        }\n      });\n    },\n    // 获取歌手热门歌曲50首\n    getSingerHotSongBy() {\n      getSingerHotSong(this.id).then(res => {\n        this.hotsong = res.data.hotSongs;\n      });\n    },\n    // 获取歌手专辑\n    getSingerAlbumBy(page = 1) {\n      let offset = (page - 1) * 30;\n      getSingerAlbum(this.id, offset).then(res => {\n        this.albumlist = res.data.hotAlbums;\n      });\n    },\n    // 获取歌手MV\n    getSingerMvBy(page = 1) {\n      let offset = (page - 1) * 30;\n      getSingerMv(this.id, offset).then(res => {\n        this.mvlist = res.data.mvs;\n      });\n    },\n    // 获取相似歌手\n    getSingerSimilarBy() {\n      getSingerSimilar(this.id).then(res => {\n        this.similarlist = res.data.artists;\n      });\n    },\n    /* \n    事件监听\n    */\n    //tabs切换点击事件\n    tabClick(tabs) {\n      if (tabs.label === \"热门歌曲\") {\n        // 获取歌手热门歌曲50首\n        this.getSingerHotSongBy();\n      }\n      if (tabs.label === \"MV\") {\n        // 获取歌手MV\n        this.getSingerMvBy();\n      }\n      if (tabs.label === \"相似歌手\") {\n        // 获取相似歌手\n        this.getSingerSimilarBy();\n      }\n    },\n    // // 专辑分页\n    // handleCurrentChange(page) {\n    // \t// 当前页码改变时触发（参数是当前页码）\n    // \tthis.getSingerAlbumBy(page);\n    // },\n    // // Mv分页\n    // changeMvPage(page) {\n    // \tthis.getSingerMvBy(page);\n    // \t// 返回顶部\n    // \tlet backtop = document.querySelector(\"#backtop\");\n    // \tbacktop.click();\n    // },\n\n    /* \n    收藏当前歌手事件\n    */\n    // 获取用户收藏的歌手\n    getUserSubSinger() {\n      getSubSinger().then(res => {\n        this.$store.dispatch(\"saveFavoriteSinger\", res.data.data);\n        this.isSubSinger();\n      });\n    },\n    // 判断是否收藏了当前歌手\n    isSubSinger() {\n      let index = this.subSingerlist.findIndex(item => {\n        return item.id == this.id;\n      });\n      if (index == -1) {\n        this.isSub = false;\n      } else {\n        this.isSub = true;\n      }\n    },\n    // 点击收藏按钮的回调\n    subSingerBy() {\n      let t = !this.isSub ? 1 : 2; // 1 为收藏,其他为取消收藏\n      subSinger(t, this.id).then(res => {\n        if (res.data.code == 200) {\n          // 从新获取收藏的歌手\n          this.getUserSubSinger();\n          if (t == 1) {\n            this.$message({\n              type: \"success\",\n              message: \"收藏成功\",\n              center: true\n            });\n          } else {\n            this.$message({\n              type: \"success\",\n              message: \"取消收藏成功\",\n              center: true\n            });\n          }\n        }\n      }).catch(err => this.$message.warning(err, \"操作失败,请重试\"));\n    }\n  },\n  watch: {\n    // 点击相似歌手时\n    // 路由push相同地址不同参数时 不会自动刷新页面，这里通过watch监听路由变化，一但发生变化reload刷新\n    $route(to, from) {\n      if (to !== from) {\n        this.reload();\n      }\n    }\n  }\n};","map":{"version":3,"names":["getSingerDetail","getSingerHotSong","getSingerAlbum","getSingerMv","getSingerSimilar","subSinger","getSubSinger","mapGetters","SingerInfo","SingerAlbum","SingerHotsong","SingerMv","SingerSimilar","inject","name","components","computed","data","id","singerInfo","albumSize","singerHomeId","hotsong","albumlist","mvlist","similarlist","isSub","created","$route","params","getSingerDetailBy","getSingerAlbumBy","subSingerlist","length","getUserSubSinger","isSubSinger","methods","then","res","user","artist","userId","getSingerHotSongBy","hotSongs","page","offset","hotAlbums","getSingerMvBy","mvs","getSingerSimilarBy","artists","tabClick","tabs","label","$store","dispatch","index","findIndex","item","subSingerBy","t","code","$message","type","message","center","catch","err","warning","watch","to","from","reload"],"sources":["src/views/singerdetail/Singerdetail.vue"],"sourcesContent":["<template>\n\t<div id=\"singer-detail\" class=\"w\">\n\t\t<!-- 歌手基本信息 -->\n\t\t<SingerInfo :singer-info=\"singerInfo\" :is-sub=\"isSub\" @subSingerBy=\"subSingerBy\" />\n\t\t<!-- 歌手作品信息 -->\n\t\t<div class=\"singer-works\">\n\t\t\t<el-tabs @tab-click=\"tabClick\">\n\t\t\t\t<!-- 专辑列表 -->\n\t\t\t\t<el-tab-pane label=\"专辑\">\n\t\t\t\t\t<!-- 专辑内容 -->\n\t\t\t\t\t<SingerAlbum :albumlist=\"albumlist\" />\n\t\t\t\t\t<!-- 分页器 -->\n\t\t\t\t\t<Pagination :total=\"albumSize\" :page-size=\"30\" @handleCurrentChange=\"getSingerAlbumBy\" v-show=\"albumlist.length != 0\" />\n\t\t\t\t</el-tab-pane>\n\t\t\t\t<!-- 热门50首 -->\n\t\t\t\t<el-tab-pane label=\"热门歌曲\">\n\t\t\t\t\t<SingerHotsong :hotsong=\"hotsong\" />\n\t\t\t\t</el-tab-pane>\n\t\t\t\t<!-- MV列表 -->\n\t\t\t\t<el-tab-pane label=\"MV\">\n\t\t\t\t\t<SingerMv :mvlist=\"mvlist\" :mvsize=\"singerInfo.mvSize\" @changeMvPage=\"getSingerMvBy\" v-if=\"mvlist.length !== 0\" />\n\t\t\t\t\t<div class=\"no\" v-else>\n\t\t\t\t\t\t<el-empty description=\"暂无MV\" :image-size=\"200\"></el-empty>\n\t\t\t\t\t</div>\n\t\t\t\t</el-tab-pane>\n\t\t\t\t<!-- 歌手详情 -->\n\t\t\t\t<el-tab-pane label=\"歌手详情\">\n\t\t\t\t\t<div class=\"singer-desc\" v-if=\"singerInfo.briefDesc\">\n\t\t\t\t\t\t<p v-html=\"singerInfo.briefDesc\"></p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"no\" v-else>\n\t\t\t\t\t\t<el-empty description=\"暂无详情介绍\" :image-size=\"200\"></el-empty>\n\t\t\t\t\t</div>\n\t\t\t\t</el-tab-pane>\n\t\t\t\t<!-- 相似歌手 -->\n\t\t\t\t<el-tab-pane label=\"相似歌手\">\n\t\t\t\t\t<SingerSimilar :similarlist=\"similarlist\" v-if=\"similarlist.length !== 0\" />\n\t\t\t\t\t<div class=\"no\" v-else>\n\t\t\t\t\t\t<el-empty description=\"暂无相似歌手\" :image-size=\"200\"></el-empty>\n\t\t\t\t\t</div>\n\t\t\t\t</el-tab-pane>\n\t\t\t</el-tabs>\n\t\t</div>\n\t</div>\n</template>\n<script>\n/* 网络请求 */\nimport { getSingerDetail, getSingerHotSong, getSingerAlbum, getSingerMv, getSingerSimilar, subSinger } from \"../../../network/singerdetail/singerdetail\";\nimport { getSubSinger } from \"../../../network/myfavorite/myfavorite\";\n/* vuex */\nimport { mapGetters } from \"vuex\";\n/* 子组件 */\nimport SingerInfo from \"./Childcomps/SingerInfo.vue\";\nimport SingerAlbum from \"./Childcomps/SingerAlbum.vue\";\nimport SingerHotsong from \"./Childcomps/SingerHotsong.vue\";\nimport SingerMv from \"./Childcomps/SingerMv.vue\";\nimport SingerSimilar from \"./Childcomps/SingerSimilar.vue\";\nexport default {\n\tinject: [\"reload\"],\n\tname: \"app_Singerdetail\",\n\tcomponents: {\n\t\tSingerInfo,\n\t\tSingerAlbum,\n\t\tSingerHotsong,\n\t\tSingerMv,\n\t\tSingerSimilar,\n\t},\n\tcomputed: {\n\t\t...mapGetters([\"subSingerlist\"]),\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tid: \"\", //歌手id\n\t\t\tsingerInfo: {}, //歌手基本信息\n\t\t\talbumSize: 0, //专辑数量\n\t\t\tsingerHomeId: {},\n\t\t\thotsong: [], //歌手热门歌曲\n\t\t\talbumlist: [], //歌手专辑列表\n\t\t\tmvlist: [], //歌手mv列表\n\t\t\tsimilarlist: [], //相似歌手\n\t\t\tisSub: false, //是否收藏了当前歌手\n\t\t};\n\t},\n\tcreated() {\n\t\t// 保存歌手id\n\t\tthis.id = this.$route.params.id;\n\t\t// 根据歌手id获取歌手基本信息\n\t\tthis.getSingerDetailBy();\n\t\t// 默认获取歌手第一页 30张专辑\n\t\tthis.getSingerAlbumBy();\n\t\t// 获取用户收藏的歌手\n\t\tif (this.subSingerlist.length == 0) {\n\t\t\tthis.getUserSubSinger();\n\t\t\treturn;\n\t\t}\n\t\t// 判断是否收藏了当前歌手\n\t\tthis.isSubSinger();\n\t},\n\n\tmethods: {\n\t\t/* \n\t\t网络请求\n\t\t*/\n\t\t// 根据歌手id获取歌手基本信息\n\t\tgetSingerDetailBy() {\n\t\t\tgetSingerDetail(this.id).then(res => {\n\t\t\t\t// 如果该歌手有用户id就保存起来\n\t\t\t\tif (res.data.data.user) {\n\t\t\t\t\tres.data.data.artist.userId = res.data.data.user.userId;\n\t\t\t\t\tthis.singerInfo = res.data.data.artist;\n\t\t\t\t\tthis.albumSize = res.data.data.artist.albumSize;\n\t\t\t\t} else {\n\t\t\t\t\tthis.singerInfo = res.data.data.artist;\n\t\t\t\t\tthis.albumSize = res.data.data.artist.albumSize;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t// 获取歌手热门歌曲50首\n\t\tgetSingerHotSongBy() {\n\t\t\tgetSingerHotSong(this.id).then(res => {\n\t\t\t\tthis.hotsong = res.data.hotSongs;\n\t\t\t});\n\t\t},\n\t\t// 获取歌手专辑\n\t\tgetSingerAlbumBy(page = 1) {\n\t\t\tlet offset = (page - 1) * 30;\n\t\t\tgetSingerAlbum(this.id, offset).then(res => {\n\t\t\t\tthis.albumlist = res.data.hotAlbums;\n\t\t\t});\n\t\t},\n\t\t// 获取歌手MV\n\t\tgetSingerMvBy(page = 1) {\n\t\t\tlet offset = (page - 1) * 30;\n\t\t\tgetSingerMv(this.id, offset).then(res => {\n\t\t\t\tthis.mvlist = res.data.mvs;\n\t\t\t});\n\t\t},\n\t\t// 获取相似歌手\n\t\tgetSingerSimilarBy() {\n\t\t\tgetSingerSimilar(this.id).then(res => {\n\t\t\t\tthis.similarlist = res.data.artists;\n\t\t\t});\n\t\t},\n\n\t\t/* \n\t\t事件监听\n\t\t*/\n\t\t//tabs切换点击事件\n\t\ttabClick(tabs) {\n\t\t\tif (tabs.label === \"热门歌曲\") {\n\t\t\t\t// 获取歌手热门歌曲50首\n\t\t\t\tthis.getSingerHotSongBy();\n\t\t\t}\n\t\t\tif (tabs.label === \"MV\") {\n\t\t\t\t// 获取歌手MV\n\t\t\t\tthis.getSingerMvBy();\n\t\t\t}\n\t\t\tif (tabs.label === \"相似歌手\") {\n\t\t\t\t// 获取相似歌手\n\t\t\t\tthis.getSingerSimilarBy();\n\t\t\t}\n\t\t},\n\t\t// // 专辑分页\n\t\t// handleCurrentChange(page) {\n\t\t// \t// 当前页码改变时触发（参数是当前页码）\n\t\t// \tthis.getSingerAlbumBy(page);\n\t\t// },\n\t\t// // Mv分页\n\t\t// changeMvPage(page) {\n\t\t// \tthis.getSingerMvBy(page);\n\t\t// \t// 返回顶部\n\t\t// \tlet backtop = document.querySelector(\"#backtop\");\n\t\t// \tbacktop.click();\n\t\t// },\n\n\t\t/* \n\t\t收藏当前歌手事件\n\t\t*/\n\t\t// 获取用户收藏的歌手\n\t\tgetUserSubSinger() {\n\t\t\tgetSubSinger().then(res => {\n\t\t\t\tthis.$store.dispatch(\"saveFavoriteSinger\", res.data.data);\n\t\t\t\tthis.isSubSinger();\n\t\t\t});\n\t\t},\n\t\t// 判断是否收藏了当前歌手\n\t\tisSubSinger() {\n\t\t\tlet index = this.subSingerlist.findIndex(item => {\n\t\t\t\treturn item.id == this.id;\n\t\t\t});\n\t\t\tif (index == -1) {\n\t\t\t\tthis.isSub = false;\n\t\t\t} else {\n\t\t\t\tthis.isSub = true;\n\t\t\t}\n\t\t},\n\t\t// 点击收藏按钮的回调\n\t\tsubSingerBy() {\n\t\t\tlet t = !this.isSub ? 1 : 2; // 1 为收藏,其他为取消收藏\n\t\t\tsubSinger(t, this.id)\n\t\t\t\t.then(res => {\n\t\t\t\t\tif (res.data.code == 200) {\n\t\t\t\t\t\t// 从新获取收藏的歌手\n\t\t\t\t\t\tthis.getUserSubSinger();\n\t\t\t\t\t\tif (t == 1) {\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\t\t\tmessage: \"收藏成功\",\n\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\t\t\tmessage: \"取消收藏成功\",\n\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(err => this.$message.warning( err ,\"操作失败,请重试\"));\n\t\t},\n\t},\n\twatch: {\n\t\t// 点击相似歌手时\n\t\t// 路由push相同地址不同参数时 不会自动刷新页面，这里通过watch监听路由变化，一但发生变化reload刷新\n\t\t$route(to, from) {\n\t\t\tif (to !== from) {\n\t\t\t\tthis.reload();\n\t\t\t}\n\t\t},\n\t},\n};\n</script>\n\n<style lang=\"less\" scoped>\n.singer-desc {\n\ttext-indent: 28px;\n\tline-height: 28px;\n}\n.no {\n\twidth: 100%;\n\ttext-align: center;\n\tfont-size: 24px;\n\tfont-weight: 700;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}