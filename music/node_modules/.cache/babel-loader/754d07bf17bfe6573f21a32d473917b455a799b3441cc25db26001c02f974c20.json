{"ast":null,"code":"import Aside from \"./Aside.vue\";\nimport PlayingSongDetail from \"../components/content/player/PlayingSongDetail.vue\";\nimport FloatLyric from \"../components/content/player/FloatLyric.vue\";\nimport { mapGetters } from \"vuex\";\nimport { downloadMusic } from \"../../network/request.js\";\nexport default {\n  name: \"app_Main\",\n  components: {\n    Aside,\n    PlayingSongDetail,\n    FloatLyric\n  },\n  computed: {\n    ...mapGetters([\"nowSongDetail\", \"isShowSongDetail\", \"showFloatLyric\"])\n  },\n  data() {\n    return {\n      isRouterAlive: true,\n      // 下载的音乐的信息\n      downloadMusicInfo: {\n        name: \"\",\n        url: \"\"\n      }\n    };\n  },\n  provide() {\n    return {\n      reload: this.reload\n    };\n  },\n  methods: {\n    // 实现页面的局部刷新 使用provide提供 到需要刷新的页面进行引用，使用inject导入引用reload，然后直接调用即可\n    reload() {\n      this.isRouterAlive = false;\n      this.$nextTick(function () {\n        this.isRouterAlive = true;\n      });\n    }\n  },\n  watch: {\n    // 监听当前下载音乐信息\n    \"$store.state.downloadMusicInfo\"(current) {\n      downloadMusic({\n        url: current.url\n      }).then(res => {\n        let url = URL.createObjectURL(res.data);\n        let a = document.querySelector(\"#downloadCurrentMusic\");\n        this.downloadMusicInfo.url = url;\n        this.downloadMusicInfo.name = current.name;\n        this.$nextTick(() => {\n          a.click();\n          // 用完释放URL对象\n          URL.revokeObjectURL(url);\n        });\n      }).catch(err => {\n        this.$message.error(err, \"下载失败,请稍后重试!\");\n      });\n    }\n  }\n};","map":{"version":3,"names":["Aside","PlayingSongDetail","FloatLyric","mapGetters","downloadMusic","name","components","computed","data","isRouterAlive","downloadMusicInfo","url","provide","reload","methods","$nextTick","watch","$store.state.downloadMusicInfo","current","then","res","URL","createObjectURL","a","document","querySelector","click","revokeObjectURL","catch","err","$message","error"],"sources":["src/layout/Main.vue"],"sourcesContent":["<template>\n\t<div id=\"main\">\n\t\t<!-- 侧边导航 -->\n\t\t<div class=\"aside\">\n\t\t\t<Aside />\n\t\t</div>\n\t\t<!-- 主路由视图 -->\n\t\t<div class=\"view\">\n\t\t\t<transition name=\"el-fade-in-linear\">\n\t\t\t\t<keep-alive include=\"Findmusic,Recvideo,RecEveryDay,MyFavorite\">\n\t\t\t\t\t<router-view v-if=\"isRouterAlive\"></router-view>\n\t\t\t\t</keep-alive>\n\t\t\t</transition>\n\t\t\t<!-- 返回顶部按钮 -->\n\t\t\t<el-backtop target=\".view\" :right=\"10\" :bottom=\"75\" id=\"backtop\"></el-backtop>\n\t\t</div>\n\t\t<!-- 当前歌曲详情页 -->\n\t\t<transition name=\"songdetail\">\n\t\t\t<PlayingSongDetail v-show=\"isShowSongDetail\" />\n\t\t</transition>\n\t\t<!-- 浮动歌词 -->\n\t\t<transition name=\"el-fade-in-linear\">\n\t\t\t<FloatLyric v-show=\"showFloatLyric\" />\n\t\t</transition>\n\t\t<!-- 用于下载的a标签 -->\n\t\t<a :href=\"downloadMusicInfo.url\" :download=\"downloadMusicInfo.name\" target=\"_blank\" id=\"downloadCurrentMusic\"></a>\n\t</div>\n</template>\n\n<script>\nimport Aside from \"./Aside.vue\";\nimport PlayingSongDetail from \"../components/content/player/PlayingSongDetail.vue\";\nimport FloatLyric from \"../components/content/player/FloatLyric.vue\";\nimport { mapGetters } from \"vuex\";\nimport { downloadMusic } from \"../../network/request.js\";\nexport default {\n\tname: \"app_Main\",\n\tcomponents: { Aside, PlayingSongDetail, FloatLyric },\n\tcomputed: {\n\t\t...mapGetters([\"nowSongDetail\", \"isShowSongDetail\", \"showFloatLyric\"]),\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tisRouterAlive: true,\n\t\t\t// 下载的音乐的信息\n\t\t\tdownloadMusicInfo: {\n\t\t\t\tname: \"\",\n\t\t\t\turl: \"\",\n\t\t\t},\n\t\t};\n\t},\n\tprovide() {\n\t\treturn {\n\t\t\treload: this.reload,\n\t\t};\n\t},\n\tmethods: {\n\t\t// 实现页面的局部刷新 使用provide提供 到需要刷新的页面进行引用，使用inject导入引用reload，然后直接调用即可\n\t\treload() {\n\t\t\tthis.isRouterAlive = false;\n\t\t\tthis.$nextTick(function () {\n\t\t\t\tthis.isRouterAlive = true;\n\t\t\t});\n\t\t},\n\t},\n\twatch: {\n\t\t// 监听当前下载音乐信息\n\t\t\"$store.state.downloadMusicInfo\"(current) {\n\t\t\tdownloadMusic({ url: current.url })\n\t\t\t\t.then(res => {\n\t\t\t\t\tlet url = URL.createObjectURL(res.data);\n\t\t\t\t\tlet a = document.querySelector(\"#downloadCurrentMusic\");\n\t\t\t\t\tthis.downloadMusicInfo.url = url;\n\t\t\t\t\tthis.downloadMusicInfo.name = current.name;\n\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\ta.click();\n\t\t\t\t\t\t// 用完释放URL对象\n\t\t\t\t\t\tURL.revokeObjectURL(url);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tthis.$message.error(err , \"下载失败,请稍后重试!\");\n\t\t\t\t});\n\t\t},\n\t},\n};\n</script>\n\n<style lang=\"less\" scoped>\n#main {\n\theight: calc(100% - 130px);\n\tdisplay: flex;\n\t.aside {\n\t\t::-webkit-scrollbar {\n\t\t\twidth: 5px;\n\t\t\theight: 12px;\n\t\t}\n\t}\n\t.view {\n\t\tflex: 1;\n\t\theight: 100%;\n\t\toverflow-y: scroll;\n\t}\n}\n\n// 歌曲详情页动画\n.songdetail-enter,\n.songdetail-leave-to {\n\ttransform: translateY(calc(100vh - 70px));\n}\n.songdetail-enter-active,\n.songdetail-leave-active {\n\ttransition: all 0.6s;\n}\n.songdetail-enter-to {\n\ttransform: translateY(0);\n}\n</style>\n"],"mappings":"AA8BA,OAAAA,KAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,UAAA;AACA,SAAAC,UAAA;AACA,SAAAC,aAAA;AACA;EACAC,IAAA;EACAC,UAAA;IAAAN,KAAA;IAAAC,iBAAA;IAAAC;EAAA;EACAK,QAAA;IACA,GAAAJ,UAAA;EACA;EACAK,KAAA;IACA;MACAC,aAAA;MACA;MACAC,iBAAA;QACAL,IAAA;QACAM,GAAA;MACA;IACA;EACA;EACAC,QAAA;IACA;MACAC,MAAA,OAAAA;IACA;EACA;EACAC,OAAA;IACA;IACAD,OAAA;MACA,KAAAJ,aAAA;MACA,KAAAM,SAAA;QACA,KAAAN,aAAA;MACA;IACA;EACA;EACAO,KAAA;IACA;IACA,gCAAAC,CAAAC,OAAA;MACAd,aAAA;QAAAO,GAAA,EAAAO,OAAA,CAAAP;MAAA,GACAQ,IAAA,CAAAC,GAAA;QACA,IAAAT,GAAA,GAAAU,GAAA,CAAAC,eAAA,CAAAF,GAAA,CAAAZ,IAAA;QACA,IAAAe,CAAA,GAAAC,QAAA,CAAAC,aAAA;QACA,KAAAf,iBAAA,CAAAC,GAAA,GAAAA,GAAA;QACA,KAAAD,iBAAA,CAAAL,IAAA,GAAAa,OAAA,CAAAb,IAAA;QACA,KAAAU,SAAA;UACAQ,CAAA,CAAAG,KAAA;UACA;UACAL,GAAA,CAAAM,eAAA,CAAAhB,GAAA;QACA;MACA,GACAiB,KAAA,CAAAC,GAAA;QACA,KAAAC,QAAA,CAAAC,KAAA,CAAAF,GAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}