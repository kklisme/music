{"ast":null,"code":"import { login, getQrKey, getLoginQr, checkLoginQr, getUserAccount, getAuthcode, checkAuthcode, register } from \"../../../../network/login/login\";\nimport { getUserSonglist, getUserDetail } from \"../../../../network/userdetail/userdetail\";\nimport { getLikSongList } from \"../../../../network/playmusic/playmusic.js\";\nimport { isPhone } from \"../../../common/utils.js\";\nexport default {\n  name: \"LoginPop\",\n  data() {\n    //注册表单验证规则\n    var validatePhone = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入手机号\"));\n      } else {\n        if (!isPhone(value)) {\n          callback(new Error(\"手机号格式不正确\"));\n        }\n        callback();\n      }\n    };\n    var validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入密码\"));\n      } else {\n        if (this.ruleForm.checkPass !== \"\") {\n          this.$refs.ruleForm.validateField(\"checkPass\");\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请再次输入密码\"));\n      } else if (value !== this.ruleForm.pass) {\n        callback(new Error(\"两次输入密码不一致!\"));\n      } else {\n        callback();\n      }\n    };\n    var validateName = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入昵称\"));\n      }\n      callback();\n    };\n    var validateCaptcha = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入验证码\"));\n      }\n      callback();\n    };\n    return {\n      PhoneNum: \"\",\n      //登录手机号\n      Password: \"\",\n      //登录密码\n      loginWay: 0,\n      //登录方式\n      qrurl: \"\",\n      //二维码路径\n      timer: \"\",\n      //轮询二维码的定时器\n      failqr: false,\n      //控制二维码失效显示文本\n      scanQr: false,\n      isGetCaptcha: false,\n      //是否获取验证码\n      tip: \"\",\n      //获取验证码后的文字提示\n      ruleForm: {\n        phone: \"\",\n        //注册手机号\n        pass: \"\",\n        //注册密码\n        checkPass: \"\",\n        //验证密码\n        nickname: \"\",\n        //昵称\n        captcha: \"\" //验证码\n      },\n\n      rules: {\n        phone: [{\n          validator: validatePhone,\n          trigger: \"blur\",\n          required: true\n        }],\n        pass: [{\n          validator: validatePass,\n          trigger: \"blur\",\n          required: true\n        }],\n        checkPass: [{\n          validator: validatePass2,\n          trigger: \"blur\",\n          required: true\n        }],\n        nickname: [{\n          validator: validateName,\n          trigger: \"blur\",\n          required: true\n        }],\n        captcha: [{\n          validator: validateCaptcha,\n          trigger: \"blur\",\n          required: true\n        }]\n      }\n    };\n  },\n  created() {},\n  methods: {\n    // 关闭登录框\n    closeLogin() {\n      this.$emit(\"closeLogin\");\n      clearInterval(this.timer);\n    },\n    // 切换登录方式\n    changeLoginWay(way) {\n      this.loginWay = way;\n      // 如果是手机号登录就清除二维码登录的定时器\n      if (way !== 1) {\n        clearInterval(this.timer);\n        if (way === 0) {\n          this.$refs.ruleForm.resetFields(); //重置注册表单\n        }\n      }\n      // 二维码登录\n      if (way === 1) {\n        this.qrLogin();\n      }\n    },\n    // 二维码登录\n    async qrLogin() {\n      this.failqr = false; // 用于隐藏二维码失效后的文本提示\n      this.scanQr = false;\n      // 获取二维码key\n      let res = await getQrKey();\n      let key = res.data.data.unikey;\n      // 生成二维码\n      let res2 = await getLoginQr(key);\n      this.qrurl = res2.data.data.qrimg;\n      // 检查二维码状态（利用定时器不断轮询）\n      this.timer = setInterval(async () => {\n        let statusRes = await checkLoginQr(key);\n        console.log(statusRes.data);\n        if (statusRes.data.code === 800) {\n          this.$message({\n            showClose: true,\n            message: \"二维码已失效\",\n            type: \"error\",\n            center: true\n          });\n          clearInterval(this.timer);\n          // 用于显示二维码失效后的文本提示，\n          this.failqr = true;\n        }\n        if (statusRes.data.code === 802) {\n          this.scanQr = true;\n        }\n        if (statusRes.data.code === 803) {\n          clearInterval(this.timer);\n          this.$message({\n            showClose: true,\n            message: \"登录成功\",\n            type: \"success\",\n            center: true\n          });\n          // 获取用户账户信息\n          this.getUserLoginAccount();\n        }\n      }, 2000);\n    },\n    // 二维码登录 获取用户登录后的账户信息\n    getUserLoginAccount() {\n      getUserAccount().then(res1 => {\n        let uid = res1.data.account.id;\n        // 获取用户个人信息\n        getUserDetail(uid).then(res => {\n          this.loginSuccess(res);\n        });\n      });\n    },\n    // 手机号登录事件\n    phoneLogin() {\n      if (this.PhoneNum.trim() === \"\" || this.Password === \"\") {\n        this.$message({\n          message: \"手机号或密码不能为空\",\n          type: \"warning\",\n          center: true\n        });\n        return;\n      } else {\n        login(this.PhoneNum, this.Password).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              showClose: true,\n              message: \"登录成功\",\n              type: \"success\",\n              center: true\n            });\n            // 登录成功后的一些操作\n            this.loginSuccess(res);\n          } else if (res.data.code === 502) {\n            this.$message({\n              message: \"密码错误\",\n              type: \"warning\",\n              center: true\n            });\n          } else {\n            this.$message({\n              message: \"手机号或密码错误\",\n              type: \"warning\",\n              center: true\n            });\n          }\n        }).catch(err => {\n          this.$message({\n            message: \"账号不存在\",\n            type: \"warning\",\n            center: true\n          });\n          console.log(err);\n        });\n      }\n    },\n    // 登录成功后的一些操作\n    loginSuccess(res) {\n      // 关闭登录框\n      this.closeLogin();\n      // 更新登录状态\n      this.$store.dispatch(\"updateLogin\", true);\n      this.setItem(\"isLogin\", true);\n      //缓存用户信息 防止刷新消失\n      this.setItem(\"userInfo\", res.data.profile);\n      // 提交vuex 保存用户信息\n      this.$store.dispatch(\"saveUserInfo\", res.data.profile);\n      // 获取用户歌单数据\n      this.getUserSonglistBy(res.data.profile.userId);\n    },\n    // 获取用户歌单和喜欢的音乐数据\n    getUserSonglistBy(uid) {\n      getUserSonglist(uid).then(res => {\n        this.setItem(\"userSongList\", res.data.playlist);\n        this.$store.dispatch(\"saveUserSongList\", res.data.playlist);\n      });\n      getLikSongList(uid).then(res => {\n        if (res.data.ids.length != 0) {\n          this.$store.dispatch(\"saveLikeSongIds\", res.data.ids);\n        }\n      });\n    },\n    // 点击获取验证码\n    getCaptcha() {\n      // 检测手机号码是否输入\n      if (this.ruleForm.phone.trim() === \"\") {\n        this.$message({\n          showClose: true,\n          message: \"请先输入手机号\",\n          type: \"warning\",\n          center: true\n        });\n      } else {\n        // 检测手机号是否注册\n        // checkPhoneNum(this.ruleForm.phone).then(res => {\n        // if (res.data.exist === 1) {\n        // \tthis.$message({\n        // \t\tshowClose: true,\n        // \t\tmessage: \"该手机号已注册\",\n        // \t\ttype: \"warning\",\n        // \t\tcenter: true,\n        // \t});\n        // } else if (res.data.exist === -1) {\n        // 获取验证码\n        getAuthcode(this.ruleForm.phone).then(res => {\n          let count = 60;\n          let timerC;\n          switch (res.data.code) {\n            case 200:\n              this.$message({\n                showClose: true,\n                message: \"验证码已发送\",\n                type: \"success\",\n                center: true\n              });\n              this.isGetCaptcha = true;\n              this.tip = `请${count}秒后再获取`;\n              timerC = setInterval(() => {\n                count--;\n                this.tip = `请${count}秒后再获取`;\n                if (count === 0) {\n                  this.isGetCaptcha = false;\n                  clearInterval(timerC);\n                }\n              }, 1000);\n              break;\n            case 400:\n              this.$message({\n                showClose: true,\n                message: \"发送验证码超过限制:每个手机号一天只能发5条验证码\",\n                type: \"warning\",\n                center: true\n              });\n              break;\n            case 405:\n              this.$message({\n                showClose: true,\n                message: \"发送验证码间隔过短\",\n                type: \"warning\",\n                center: true\n              });\n              break;\n            default:\n              this.$message({\n                showClose: true,\n                message: \"手机号不符合规范\",\n                type: \"warning\",\n                center: true\n              });\n              break;\n          }\n        });\n        // }\n        // });\n      }\n    },\n\n    //点击注册按钮事件\n    register(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          // 检查验证码\n          checkAuthcode(this.ruleForm.phone, this.ruleForm.captcha).then(res => {\n            // 注册\n            if (res.data.code == 200) {\n              register(this.ruleForm.phone, this.ruleForm.captcha, this.ruleForm.pass, this.ruleForm.nickname).then(res => {\n                // console.log(res);\n                if (res.data.code == 200) {\n                  this.$message({\n                    showClose: true,\n                    message: \"注册成功\",\n                    type: \"success\",\n                    center: true\n                  });\n                  setTimeout(() => {\n                    this.changeLoginWay(0);\n                  }, 500);\n                }\n              }).catch(err => {\n                this.$message({\n                  showClose: true,\n                  message: \"改昵称已被占用\",\n                  type: \"warning\",\n                  center: true\n                });\n                console.log(err);\n              });\n            }\n          }).catch(err => {\n            this.$message({\n              showClose: true,\n              message: \"验证码错误\",\n              type: \"warning\",\n              center: true\n            });\n            console.log(err);\n          });\n        } else {\n          this.$message({\n            showClose: true,\n            message: \"请填写完整表单\",\n            type: \"warning\",\n            center: true\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["login","getQrKey","getLoginQr","checkLoginQr","getUserAccount","getAuthcode","checkAuthcode","register","getUserSonglist","getUserDetail","getLikSongList","isPhone","name","data","validatePhone","rule","value","callback","Error","validatePass","ruleForm","checkPass","$refs","validateField","validatePass2","pass","validateName","validateCaptcha","PhoneNum","Password","loginWay","qrurl","timer","failqr","scanQr","isGetCaptcha","tip","phone","nickname","captcha","rules","validator","trigger","required","created","methods","closeLogin","$emit","clearInterval","changeLoginWay","way","resetFields","qrLogin","res","key","unikey","res2","qrimg","setInterval","statusRes","console","log","code","$message","showClose","message","type","center","getUserLoginAccount","then","res1","uid","account","id","loginSuccess","phoneLogin","trim","catch","err","$store","dispatch","setItem","profile","getUserSonglistBy","userId","playlist","ids","length","getCaptcha","count","timerC","formName","validate","valid","setTimeout"],"sources":["src/components/content/login/LoginPop.vue"],"sourcesContent":["<template>\n\t<div class=\"login-pop\">\n\t\t<!-- 关闭按钮 -->\n\t\t<div class=\"close\" @click=\"closeLogin\">\n\t\t\t<span class=\"iconfont icon-guanbi1\"></span>\n\t\t</div>\n\n\t\t<!-- 手机号登录 -->\n\t\t<div class=\"phone-login\" v-if=\"loginWay === 0\">\n\t\t\t<h2>手机号登录</h2>\n\t\t\t<!-- logo -->\n\t\t\t<div class=\"imgs\">\n\t\t\t\t<span class=\"iconfont icon-tel\"></span>\n\t\t\t</div>\n\t\t\t<!-- 表单 -->\n\t\t\t<div class=\"form\">\n\t\t\t\t<el-form label-width=\"70px\">\n\t\t\t\t\t<el-form-item label=\"手机号\">\n\t\t\t\t\t\t<el-input type=\"tlephone\" v-model=\"PhoneNum\" placeholder=\"请输入手机号\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item label=\"密码\">\n\t\t\t\t\t\t<el-input type=\"password\" v-model=\"Password\" placeholder=\"请输入密码\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item>\n\t\t\t\t\t\t<el-button type=\"primary\" @click=\"phoneLogin\">登录</el-button>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item>\n\t\t\t\t\t\t<el-button @click=\"changeLoginWay(2)\">注册</el-button>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t</el-form>\n\t\t\t</div>\n\t\t\t<div class=\"other-way\" @click=\"changeLoginWay(1)\" style=\"margin-top: 50px; padding-left: 25px\">\n\t\t\t\t<span><i class=\"iconfont icon-erweima1\"></i> <i class=\"text\">扫码登录</i> </span>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- 扫码登录 -->\n\t\t<div class=\"qr-login\" v-if=\"loginWay === 1\">\n\t\t\t<div class=\"qr\">\n\t\t\t\t<h2>扫码登录</h2>\n\t\t\t\t<img :src=\"qrurl\" alt=\"\" />\n\t\t\t\t<p class=\"failqr\" v-if=\"failqr\">二维码已失效，<span @click=\"qrLogin\">点击刷新</span></p>\n\t\t\t\t<p class=\"text\" v-if=\"!scanQr\">使用<span style=\"color: #5091ca\">网易云音乐APP</span>扫码登录</p>\n\t\t\t\t<p class=\"text\" v-if=\"scanQr\">扫描成功，请在手机上确认登录</p>\n\t\t\t\t<!-- 其他登录方式 -->\n\t\t\t\t<div class=\"other-way\" @click=\"changeLoginWay(0)\" style=\"margin-top: 30px\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<i class=\"iconfont icon-tel\"></i>\n\t\t\t\t\t\t<i class=\"text\"> 手机号登录</i></span\n\t\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"other-way\" style=\"padding-top: 50px\" @click=\"changeLoginWay(2)\">\n\t\t\t\t\t<span>还没有账号，去注册</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- 注册新用户 -->\n\t\t<div class=\"register\" v-show=\"loginWay === 2\">\n\t\t\t<h2>注册新用户</h2>\n\t\t\t<div class=\"reg-form\">\n\t\t\t\t<el-form label-position=\"right\" label-width=\"80px\" :model=\"ruleForm\" :rules=\"rules\" ref=\"ruleForm\">\n\t\t\t\t\t<el-form-item label=\"手机号\" prop=\"phone\">\n\t\t\t\t\t\t<el-input type=\"telphone\" v-model=\"ruleForm.phone\" placeholder=\"请输入手机号\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item label=\"密码\" prop=\"pass\">\n\t\t\t\t\t\t<el-input type=\"password\" v-model=\"ruleForm.pass\" placeholder=\"密码为8~20位，必须包含字母数字\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item label=\"确认密码\" prop=\"checkPass\">\n\t\t\t\t\t\t<el-input type=\"password\" v-model=\"ruleForm.checkPass\" placeholder=\"请确认密码\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item label=\"昵称\" prop=\"nickname\">\n\t\t\t\t\t\t<el-input type=\"text\" v-model=\"ruleForm.nickname\" placeholder=\"请输入昵称\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item label=\"验证码\" prop=\"captcha\" class=\"captcha-input\">\n\t\t\t\t\t\t<el-input v-model=\"ruleForm.captcha\" placeholder=\"请输入验证码\"></el-input>\n\t\t\t\t\t\t<div class=\"captcha-btn\" @click=\"getCaptcha\" v-if=\"!isGetCaptcha\">获取验证码</div>\n\t\t\t\t\t\t<div class=\"captcha\" v-else>{{ tip }}</div>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t</el-form>\n\t\t\t</div>\n\t\t\t<div class=\"reg-btns\">\n\t\t\t\t<div class=\"reg-btn\">\n\t\t\t\t\t<el-button type=\"primary\" @click=\"register('ruleForm')\">注册</el-button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"reg-btn\">\n\t\t\t\t\t<el-button @click=\"changeLoginWay(0)\">返回登录</el-button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n<script>\nimport { login, getQrKey, getLoginQr, checkLoginQr, getUserAccount, getAuthcode, checkAuthcode, register } from \"../../../../network/login/login\";\nimport { getUserSonglist, getUserDetail } from \"../../../../network/userdetail/userdetail\";\nimport { getLikSongList } from \"../../../../network/playmusic/playmusic.js\";\nimport { isPhone } from \"../../../common/utils.js\";\nexport default {\n\tname: \"LoginPop\",\n\tdata() {\n\t\t//注册表单验证规则\n\t\tvar validatePhone = (rule, value, callback) => {\n\t\t\tif (value === \"\") {\n\t\t\t\tcallback(new Error(\"请输入手机号\"));\n\t\t\t} else {\n\t\t\t\tif (!isPhone(value)) {\n\t\t\t\t\tcallback(new Error(\"手机号格式不正确\"));\n\t\t\t\t}\n\t\t\t\tcallback();\n\t\t\t}\n\t\t};\n\t\tvar validatePass = (rule, value, callback) => {\n\t\t\tif (value === \"\") {\n\t\t\t\tcallback(new Error(\"请输入密码\"));\n\t\t\t} else {\n\t\t\t\tif (this.ruleForm.checkPass !== \"\") {\n\t\t\t\t\tthis.$refs.ruleForm.validateField(\"checkPass\");\n\t\t\t\t}\n\t\t\t\tcallback();\n\t\t\t}\n\t\t};\n\t\tvar validatePass2 = (rule, value, callback) => {\n\t\t\tif (value === \"\") {\n\t\t\t\tcallback(new Error(\"请再次输入密码\"));\n\t\t\t} else if (value !== this.ruleForm.pass) {\n\t\t\t\tcallback(new Error(\"两次输入密码不一致!\"));\n\t\t\t} else {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t};\n\t\tvar validateName = (rule, value, callback) => {\n\t\t\tif (value === \"\") {\n\t\t\t\tcallback(new Error(\"请输入昵称\"));\n\t\t\t}\n\t\t\tcallback();\n\t\t};\n\t\tvar validateCaptcha = (rule, value, callback) => {\n\t\t\tif (value === \"\") {\n\t\t\t\tcallback(new Error(\"请输入验证码\"));\n\t\t\t}\n\t\t\tcallback();\n\t\t};\n\t\treturn {\n\t\t\tPhoneNum: \"\", //登录手机号\n\t\t\tPassword: \"\", //登录密码\n\t\t\tloginWay: 0, //登录方式\n\t\t\tqrurl: \"\", //二维码路径\n\t\t\ttimer: \"\", //轮询二维码的定时器\n\t\t\tfailqr: false, //控制二维码失效显示文本\n\t\t\tscanQr: false,\n\t\t\tisGetCaptcha: false, //是否获取验证码\n\t\t\ttip: \"\", //获取验证码后的文字提示\n\t\t\truleForm: {\n\t\t\t\tphone: \"\", //注册手机号\n\t\t\t\tpass: \"\", //注册密码\n\t\t\t\tcheckPass: \"\", //验证密码\n\t\t\t\tnickname: \"\", //昵称\n\t\t\t\tcaptcha: \"\", //验证码\n\t\t\t},\n\t\t\trules: {\n\t\t\t\tphone: [{ validator: validatePhone, trigger: \"blur\", required: true }],\n\t\t\t\tpass: [{ validator: validatePass, trigger: \"blur\", required: true }],\n\t\t\t\tcheckPass: [{ validator: validatePass2, trigger: \"blur\", required: true }],\n\t\t\t\tnickname: [{ validator: validateName, trigger: \"blur\", required: true }],\n\t\t\t\tcaptcha: [{ validator: validateCaptcha, trigger: \"blur\", required: true }],\n\t\t\t},\n\t\t};\n\t},\n\tcreated() {},\n\tmethods: {\n\t\t// 关闭登录框\n\t\tcloseLogin() {\n\t\t\tthis.$emit(\"closeLogin\");\n\t\t\tclearInterval(this.timer);\n\t\t},\n\t\t// 切换登录方式\n\t\tchangeLoginWay(way) {\n\t\t\tthis.loginWay = way;\n\t\t\t// 如果是手机号登录就清除二维码登录的定时器\n\t\t\tif (way !== 1) {\n\t\t\t\tclearInterval(this.timer);\n\t\t\t\tif (way === 0) {\n\t\t\t\t\tthis.$refs.ruleForm.resetFields(); //重置注册表单\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 二维码登录\n\t\t\tif (way === 1) {\n\t\t\t\tthis.qrLogin();\n\t\t\t}\n\t\t},\n\n\t\t// 二维码登录\n\t\tasync qrLogin() {\n\t\t\tthis.failqr = false; // 用于隐藏二维码失效后的文本提示\n\t\t\tthis.scanQr = false;\n\t\t\t// 获取二维码key\n\t\t\tlet res = await getQrKey();\n\t\t\tlet key = res.data.data.unikey;\n\t\t\t// 生成二维码\n\t\t\tlet res2 = await getLoginQr(key);\n\t\t\tthis.qrurl = res2.data.data.qrimg;\n\t\t\t// 检查二维码状态（利用定时器不断轮询）\n\t\t\tthis.timer = setInterval(async () => {\n\t\t\t\tlet statusRes = await checkLoginQr(key);\n\t\t\t\tconsole.log(statusRes.data);\n\t\t\t\tif (statusRes.data.code === 800) {\n\t\t\t\t\tthis.$message({\n\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\tmessage: \"二维码已失效\",\n\t\t\t\t\t\ttype: \"error\",\n\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t});\n\t\t\t\t\tclearInterval(this.timer);\n\t\t\t\t\t// 用于显示二维码失效后的文本提示，\n\t\t\t\t\tthis.failqr = true;\n\t\t\t\t}\n\t\t\t\tif (statusRes.data.code === 802) {\n\t\t\t\t\tthis.scanQr = true;\n\t\t\t\t}\n\t\t\t\tif (statusRes.data.code === 803) {\n\t\t\t\t\tclearInterval(this.timer);\n\t\t\t\t\tthis.$message({\n\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\tmessage: \"登录成功\",\n\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t});\n\t\t\t\t\t// 获取用户账户信息\n\t\t\t\t\tthis.getUserLoginAccount();\n\t\t\t\t}\n\t\t\t}, 2000);\n\t\t},\n\t\t// 二维码登录 获取用户登录后的账户信息\n\t\tgetUserLoginAccount() {\n\t\t\tgetUserAccount().then(res1 => {\n\t\t\t\tlet uid = res1.data.account.id;\n\t\t\t\t// 获取用户个人信息\n\t\t\t\tgetUserDetail(uid).then(res => {\n\t\t\t\t\tthis.loginSuccess(res);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t// 手机号登录事件\n\t\tphoneLogin() {\n\t\t\tif (this.PhoneNum.trim() === \"\" || this.Password === \"\") {\n\t\t\t\tthis.$message({\n\t\t\t\t\tmessage: \"手机号或密码不能为空\",\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tcenter: true,\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tlogin(this.PhoneNum, this.Password)\n\t\t\t\t\t.then(res => {\n\t\t\t\t\t\tif (res.data.code === 200) {\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\t\t\tmessage: \"登录成功\",\n\t\t\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t// 登录成功后的一些操作\n\t\t\t\t\t\t\tthis.loginSuccess(res);\n\t\t\t\t\t\t} else if (res.data.code === 502) {\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\tmessage: \"密码错误\",\n\t\t\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\tmessage: \"手机号或密码错误\",\n\t\t\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\tmessage: \"账号不存在\",\n\t\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t});\n                        console.log(err)\n\t\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t// 登录成功后的一些操作\n\t\tloginSuccess(res) {\n\t\t\t// 关闭登录框\n\t\t\tthis.closeLogin();\n\t\t\t// 更新登录状态\n\t\t\tthis.$store.dispatch(\"updateLogin\", true);\n\t\t\tthis.setItem(\"isLogin\", true);\n\t\t\t//缓存用户信息 防止刷新消失\n\t\t\tthis.setItem(\"userInfo\", res.data.profile);\n\t\t\t// 提交vuex 保存用户信息\n\t\t\tthis.$store.dispatch(\"saveUserInfo\", res.data.profile);\n\t\t\t// 获取用户歌单数据\n\t\t\tthis.getUserSonglistBy(res.data.profile.userId);\n\t\t},\n\n\t\t// 获取用户歌单和喜欢的音乐数据\n\t\tgetUserSonglistBy(uid) {\n\t\t\tgetUserSonglist(uid).then(res => {\n\t\t\t\tthis.setItem(\"userSongList\", res.data.playlist);\n\t\t\t\tthis.$store.dispatch(\"saveUserSongList\", res.data.playlist);\n\t\t\t});\n\t\t\tgetLikSongList(uid).then(res => {\n\t\t\t\tif (res.data.ids.length != 0) {\n\t\t\t\t\tthis.$store.dispatch(\"saveLikeSongIds\", res.data.ids);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t// 点击获取验证码\n\t\tgetCaptcha() {\n\t\t\t// 检测手机号码是否输入\n\t\t\tif (this.ruleForm.phone.trim() === \"\") {\n\t\t\t\tthis.$message({\n\t\t\t\t\tshowClose: true,\n\t\t\t\t\tmessage: \"请先输入手机号\",\n\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\tcenter: true,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// 检测手机号是否注册\n\t\t\t\t// checkPhoneNum(this.ruleForm.phone).then(res => {\n\t\t\t\t// if (res.data.exist === 1) {\n\t\t\t\t// \tthis.$message({\n\t\t\t\t// \t\tshowClose: true,\n\t\t\t\t// \t\tmessage: \"该手机号已注册\",\n\t\t\t\t// \t\ttype: \"warning\",\n\t\t\t\t// \t\tcenter: true,\n\t\t\t\t// \t});\n\t\t\t\t// } else if (res.data.exist === -1) {\n\t\t\t\t// 获取验证码\n\t\t\t\tgetAuthcode(this.ruleForm.phone).then(res => {\n                    let count = 60;\n                    let timerC\n\t\t\t\t\tswitch (res.data.code) {\n\t\t\t\t\t\tcase 200:\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\t\t\tmessage: \"验证码已发送\",\n\t\t\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.isGetCaptcha = true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.tip = `请${count}秒后再获取`;\n\t\t\t\t\t\t\ttimerC = setInterval(() => {\n\t\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t\t\tthis.tip = `请${count}秒后再获取`;\n\t\t\t\t\t\t\t\tif (count === 0) {\n\t\t\t\t\t\t\t\t\tthis.isGetCaptcha = false;\n\t\t\t\t\t\t\t\t\tclearInterval(timerC);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 400:\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\t\t\tmessage: \"发送验证码超过限制:每个手机号一天只能发5条验证码\",\n\t\t\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 405:\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\t\t\tmessage: \"发送验证码间隔过短\",\n\t\t\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\t\t\tmessage: \"手机号不符合规范\",\n\t\t\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// }\n\t\t\t\t// });\n\t\t\t}\n\t\t},\n\n\t\t//点击注册按钮事件\n\t\tregister(formName) {\n\t\t\tthis.$refs[formName].validate(valid => {\n\t\t\t\tif (valid) {\n\t\t\t\t\t// 检查验证码\n\t\t\t\t\tcheckAuthcode(this.ruleForm.phone, this.ruleForm.captcha)\n\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\t// 注册\n\t\t\t\t\t\t\tif (res.data.code == 200) {\n\t\t\t\t\t\t\t\tregister(this.ruleForm.phone, this.ruleForm.captcha, this.ruleForm.pass, this.ruleForm.nickname)\n\t\t\t\t\t\t\t\t\t.then(res => {\n\t\t\t\t\t\t\t\t\t\t// console.log(res);\n\t\t\t\t\t\t\t\t\t\tif (res.data.code == 200) {\n\t\t\t\t\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: \"注册成功\",\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.changeLoginWay(0);\n\t\t\t\t\t\t\t\t\t\t\t}, 500);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\t\t\t\t\t\tmessage: \"改昵称已被占用\",\n\t\t\t\t\t\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t\t\t\t});\n                                        console.log(err)\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\t\t\tmessage: \"验证码错误\",\n\t\t\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t});\n                            console.log(err)\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.$message({\n\t\t\t\t\t\tshowClose: true,\n\t\t\t\t\t\tmessage: \"请填写完整表单\",\n\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t},\n};\n</script>\n\n<style lang=\"less\" scoped>\n.login-pop {\n\tposition: absolute;\n\ttop: 120px;\n\tleft: 50%;\n\ttransform: translateX(-50%);\n\tz-index: 99;\n\tbox-shadow: 0px 0px 5px 5px #eee;\n\tbackground: #dcdcdc;\n\tborder-radius: 10px;\n\twidth: 400px;\n\theight: 520px;\n\tbackground: #fff;\n\ttext-align: center;\n\t.close {\n\t\ttext-align: right;\n\t\tcursor: pointer;\n\t\tpadding: 10px 20px 0 0;\n\t\t.iconfont {\n\t\t\tfont-size: 22px;\n\t\t}\n\t}\n}\n.imgs {\n\twidth: 150px;\n\theight: 150px;\n\tmargin: 0 auto;\n\tline-height: 150px;\n\t.icon-tel {\n\t\tfont-size: 82px;\n\t\tcolor: var(--themeColor);\n\t}\n\tpadding-bottom: 20px;\n}\n.form {\n\tpadding-right: 30px;\n}\n.phone-login {\n\t.el-form-item {\n\t\tmargin-bottom: 12px;\n\t}\n\t.btn {\n\t\twidth: 300px;\n\t\tmargin: 0 auto 12px;\n\t\ttransform: translateX(30px);\n\t}\n}\n.qr-login {\n\t.qr {\n\t\th2 {\n\t\t\tmargin-top: 20px;\n\t\t}\n\t\twidth: 100%;\n\t\tmargin-bottom: 50px;\n\t\timg {\n\t\t\twidth: 220px;\n\t\t\theight: 220px;\n\t\t}\n\t\t.failqr {\n\t\t\tmargin-bottom: 5px;\n\t\t\tspan {\n\t\t\t\tcolor: var(--themeColor);\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t}\n\t}\n}\n.other-way {\n\tspan:hover {\n\t\tcolor: var(--themeColor);\n\t\tcursor: pointer;\n\t}\n}\n.register {\n\th2 {\n\t\tmargin-top: 10px;\n\t}\n\t.reg-form {\n\t\tmargin-top: 20px;\n\t\tpadding-right: 20px;\n\t\t.captcha-input {\n\t\t\tposition: relative;\n\t\t\t.captcha-btn {\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 5px;\n\t\t\t\ttop: 0;\n\t\t\t\tcursor: pointer;\n\t\t\t\tfont-size: 12px;\n\t\t\t\tcolor: var(--themeColor);\n\t\t\t}\n\t\t\t.captcha {\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 5px;\n\t\t\t\ttop: 0;\n\t\t\t\tfont-size: 12px;\n\t\t\t\tcolor: #999;\n\t\t\t}\n\t\t}\n\t}\n\t.reg-btns {\n\t\twidth: 250px;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tmargin: 0 auto 12px;\n\t\ttransform: translateX(18px);\n\t\t.reg-btn {\n\t\t\twidth: 48%;\n\t\t}\n\t}\n\t/deep/ .el-form-item__label {\n\t\tpadding-right: 5px;\n\t}\n}\n.el-button {\n\twidth: 100%;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}