{"ast":null,"code":"/* \n网络请求模块\n */\nimport { getSongListDetail, getEverySongDetail, getSongListSubscribers, subSongList } from \"../../../network/songlistdetail/songlistdetail\";\nimport { getSongUrl } from \"../../../network/playmusic/playmusic.js\";\nimport { getUserSonglist } from \"../../../network/userdetail/userdetail\";\nimport { mapGetters } from \"vuex\";\n/* \n子组件 \n*/\nimport Topdesc from \"./Childcomps/Topdesc.vue\";\nimport CommentPage from \"../../components/content/comment/commentPage.vue\";\nimport SongTable from \"../../components/content/SongTable.vue\";\nimport Subscribers from \"./Childcomps/Subscribers.vue\";\nexport default {\n  inject: [\"reload\"],\n  name: \"app_Songlistdetail\",\n  components: {\n    Topdesc,\n    CommentPage,\n    SongTable,\n    Subscribers\n  },\n  data() {\n    return {\n      id: \"\",\n      //存储路由传递过来歌单id\n      playlist: {},\n      //歌单描述信息\n      songids: \"\",\n      //歌单中所有歌曲id\n      songs: [],\n      //歌单中所有歌曲详细信息\n      subscribers: [],\n      //收藏者\n      totalcount: 0,\n      //收藏者数量\n      isSub: false //是否收藏了当前歌单\n    };\n  },\n\n  computed: {\n    ...mapGetters([\"userSongList\", \"userInfo\"])\n  },\n  created() {\n    //保存路由传递过来歌单id\n    this.id = this.$route.params.id;\n    //  根据歌单id请求对应的歌单详情数据\n    this.getSongListDetailBy();\n    // 获取歌单收藏者\n    this.getSongListSubscribersBy();\n    // 判断用户是否收藏了该歌单\n    this.isSubSongList();\n  },\n  methods: {\n    /* \n      网络请求\n      */\n    // 根据id获取对应的歌单详情数据\n    getSongListDetailBy() {\n      getSongListDetail(this.id).then(res => {\n        // 保存歌单描述信息\n        this.playlist = res.data.playlist;\n        //存储歌单中的所歌曲id，为一个字符串\n        if (this.playlist.trackIds.length > 1000) {\n          this.playlist.trackIds.slice(0, 500).forEach(item => {\n            this.songids += item.id + \",\";\n          });\n        } else {\n          this.playlist.trackIds.forEach(item => {\n            this.songids += item.id + \",\";\n          });\n        }\n        let queryids = this.songids.substr(0, this.songids.length - 1);\n        /* 根据歌曲id获取每首歌的信息*/\n        getEverySongDetail(queryids).then(res => {\n          if (res.data.code == 200) {\n            this.songs = res.data.songs;\n          }\n        });\n      });\n    },\n    // 获取歌单收藏者\n    getSongListSubscribersBy(page = 1) {\n      let offset = (page - 1) * 48;\n      getSongListSubscribers(this.id, offset).then(res => {\n        this.subscribers = res.data.subscribers;\n        this.totalcount = res.data.total;\n      });\n    },\n    /* \n      事件监听\n      */\n    //  评论分页事件\n    changePage() {\n      // 返回指定位置\n      let view = document.querySelector(\".view\");\n      view.scrollTo({\n        top: 300\n      });\n    },\n    // 播放全部歌曲事件\n    playAllSong() {\n      this.$store.dispatch(\"addAllSong\", this.songs);\n      //默认播放第一首歌\n      getSongUrl(this.songs[0].id).then(res => {\n        this.$store.dispatch(\"saveSongUrl\", res.data.data[0].url);\n        // 更新播放状态\n        this.$store.dispatch(\"changePlayState\", true);\n      });\n      //提交vuex保存当前歌曲详情\n      this.$store.dispatch(\"saveSongDetail\", this.songs[0]);\n    },\n    /* 收藏/取消收藏歌单事件 */\n    // 先判断用户是否收藏了该歌单\n    isSubSongList() {\n      // 查找用户歌单是否有当前歌单\n      let index = this.userSongList.findIndex(item => {\n        return item.id == this.id;\n      });\n      if (index == -1) {\n        //如果没有 返回false\n        this.isSub = false;\n      } else {\n        //否则返回true\n        this.isSub = true;\n      }\n    },\n    // 点击收藏按钮的回调\n    subSongListBy() {\n      let t = !this.isSub ? 1 : 2; // 1 为收藏,2为取消收藏\n      // 发送网络请求 收藏/取消收藏当前歌单\n      subSongList(t, this.id).then(res => {\n        // console.log(res);\n        if (res.data.code == 200) {\n          this.isSub = !this.isSub;\n          // 重新获取用户歌单\n          getUserSonglist(this.userInfo.userId).then(res => {\n            this.setItem(\"userSongList\", res.data.playlist);\n            this.$store.dispatch(\"saveUserSongList\", res.data.playlist);\n            if (t == 1) {\n              this.$message({\n                type: \"success\",\n                message: \"收藏成功\",\n                center: true\n              });\n            } else {\n              this.$message({\n                type: \"success\",\n                message: \"取消收藏成功\",\n                center: true\n              });\n            }\n          });\n        }\n      }).catch(err => this.$message.warning(err, \"操作失败,请重试\"));\n    },\n    /*如果是用户喜欢的歌单，点击喜欢歌曲后更新歌单*/\n    updateSonglist() {\n      this.getSongListDetailBy();\n      setTimeout(() => {\n        this.reload();\n      }, 1000);\n    }\n  },\n  watch: {\n    // 路由push相同地址不同参数时 不会自动刷新页面，这里通过watch监听路由变化，一但发生变化reload刷新\n    $route(to, from) {\n      if (to !== from) {\n        this.reload();\n      }\n    }\n  }\n};","map":{"version":3,"names":["getSongListDetail","getEverySongDetail","getSongListSubscribers","subSongList","getSongUrl","getUserSonglist","mapGetters","Topdesc","CommentPage","SongTable","Subscribers","inject","name","components","data","id","playlist","songids","songs","subscribers","totalcount","isSub","computed","created","$route","params","getSongListDetailBy","getSongListSubscribersBy","isSubSongList","methods","then","res","trackIds","length","slice","forEach","item","queryids","substr","code","page","offset","total","changePage","view","document","querySelector","scrollTo","top","playAllSong","$store","dispatch","url","index","userSongList","findIndex","subSongListBy","t","userInfo","userId","setItem","$message","type","message","center","catch","err","warning","updateSonglist","setTimeout","reload","watch","to","from"],"sources":["src/views/songlistdetail/Songlistdetail.vue"],"sourcesContent":["<template>\n\t<div id=\"song-list-detail\" class=\"w\">\n\t\t<!-- 顶部歌单描述 -->\n\t\t<Topdesc :playlist=\"playlist\" :is-sub=\"isSub\" @playAllSong=\"playAllSong\" @subSongListBy=\"subSongListBy\" />\n\t\t<!-- 底部歌曲 -->\n\t\t<div class=\"bot-song-list\" v-if=\"Object.keys(playlist).length !== 0\">\n\t\t\t<el-tabs>\n\t\t\t\t<!-- 歌曲列表 -->\n\t\t\t\t<el-tab-pane label=\"歌曲列表\">\n\t\t\t\t\t<SongTable :songs=\"songs\" @updateSonglist=\"updateSonglist\" />\n\t\t\t\t</el-tab-pane>\n\t\t\t\t<!-- 评论 -->\n\t\t\t\t<el-tab-pane>\n\t\t\t\t\t<span slot=\"label\">评论</span>\n\t\t\t\t\t<CommentPage :comment-type=\"2\" :commentres-id=\"id\" @changePage=\"changePage\" />\n\t\t\t\t</el-tab-pane>\n\t\t\t\t<!-- 收藏者 -->\n\t\t\t\t<el-tab-pane label=\"收藏者\">\n\t\t\t\t\t<Subscribers :subscribers=\"subscribers\" :totalcount=\"totalcount\" @handlePage=\"getSongListSubscribersBy\" />\n\t\t\t\t</el-tab-pane>\n\t\t\t</el-tabs>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n/* \n网络请求模块\n */\nimport { getSongListDetail, getEverySongDetail, getSongListSubscribers, subSongList } from \"../../../network/songlistdetail/songlistdetail\";\nimport { getSongUrl } from \"../../../network/playmusic/playmusic.js\";\nimport { getUserSonglist } from \"../../../network/userdetail/userdetail\";\nimport { mapGetters } from \"vuex\";\n/* \n子组件 \n*/\nimport Topdesc from \"./Childcomps/Topdesc.vue\";\nimport CommentPage from \"../../components/content/comment/commentPage.vue\";\nimport SongTable from \"../../components/content/SongTable.vue\";\nimport Subscribers from \"./Childcomps/Subscribers.vue\";\nexport default {\n\tinject: [\"reload\"],\n\tname: \"app_Songlistdetail\",\n\tcomponents: { Topdesc, CommentPage, SongTable, Subscribers },\n\tdata() {\n\t\treturn {\n\t\t\tid: \"\", //存储路由传递过来歌单id\n\t\t\tplaylist: {}, //歌单描述信息\n\t\t\tsongids: \"\", //歌单中所有歌曲id\n\t\t\tsongs: [], //歌单中所有歌曲详细信息\n\t\t\tsubscribers: [], //收藏者\n\t\t\ttotalcount: 0, //收藏者数量\n\t\t\tisSub: false, //是否收藏了当前歌单\n\t\t};\n\t},\n\tcomputed: {\n\t\t...mapGetters([\"userSongList\", \"userInfo\"]),\n\t},\n\tcreated() {\n\t\t//保存路由传递过来歌单id\n\t\tthis.id = this.$route.params.id;\n\t\t//  根据歌单id请求对应的歌单详情数据\n\t\tthis.getSongListDetailBy();\n\t\t// 获取歌单收藏者\n\t\tthis.getSongListSubscribersBy();\n\t\t// 判断用户是否收藏了该歌单\n\t\tthis.isSubSongList();\n\t},\n\tmethods: {\n\t\t/* \n    网络请求\n    */\n\t\t// 根据id获取对应的歌单详情数据\n\t\tgetSongListDetailBy() {\n\t\t\tgetSongListDetail(this.id).then(res => {\n\t\t\t\t// 保存歌单描述信息\n\t\t\t\tthis.playlist = res.data.playlist;\n\t\t\t\t//存储歌单中的所歌曲id，为一个字符串\n\t\t\t\tif (this.playlist.trackIds.length > 1000) {\n\t\t\t\t\tthis.playlist.trackIds.slice(0, 500).forEach(item => {\n\t\t\t\t\t\tthis.songids += item.id + \",\";\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.playlist.trackIds.forEach(item => {\n\t\t\t\t\t\tthis.songids += item.id + \",\";\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tlet queryids = this.songids.substr(0, this.songids.length - 1);\n\t\t\t\t/* 根据歌曲id获取每首歌的信息*/\n\t\t\t\tgetEverySongDetail(queryids).then(res => {\n\t\t\t\t\tif (res.data.code == 200) {\n\t\t\t\t\t\tthis.songs = res.data.songs;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t// 获取歌单收藏者\n\t\tgetSongListSubscribersBy(page = 1) {\n\t\t\tlet offset = (page - 1) * 48;\n\t\t\tgetSongListSubscribers(this.id, offset).then(res => {\n\t\t\t\tthis.subscribers = res.data.subscribers;\n\t\t\t\tthis.totalcount = res.data.total;\n\t\t\t});\n\t\t},\n\n\t\t/* \n    事件监听\n    */\n\t\t//  评论分页事件\n\t\tchangePage() {\n\t\t\t// 返回指定位置\n\t\t\tlet view = document.querySelector(\".view\");\n\t\t\tview.scrollTo({\n\t\t\t\ttop: 300,\n\t\t\t});\n\t\t},\n\t\t// 播放全部歌曲事件\n\t\tplayAllSong() {\n\t\t\tthis.$store.dispatch(\"addAllSong\", this.songs);\n\t\t\t//默认播放第一首歌\n\t\t\tgetSongUrl(this.songs[0].id).then(res => {\n\t\t\t\tthis.$store.dispatch(\"saveSongUrl\", res.data.data[0].url);\n\t\t\t\t// 更新播放状态\n\t\t\t\tthis.$store.dispatch(\"changePlayState\", true);\n\t\t\t});\n\t\t\t//提交vuex保存当前歌曲详情\n\t\t\tthis.$store.dispatch(\"saveSongDetail\", this.songs[0]);\n\t\t},\n\n\t\t/* 收藏/取消收藏歌单事件 */\n\t\t// 先判断用户是否收藏了该歌单\n\t\tisSubSongList() {\n\t\t\t// 查找用户歌单是否有当前歌单\n\t\t\tlet index = this.userSongList.findIndex(item => {\n\t\t\t\treturn item.id == this.id;\n\t\t\t});\n\t\t\tif (index == -1) {\n\t\t\t\t//如果没有 返回false\n\t\t\t\tthis.isSub = false;\n\t\t\t} else {\n\t\t\t\t//否则返回true\n\t\t\t\tthis.isSub = true;\n\t\t\t}\n\t\t},\n\t\t// 点击收藏按钮的回调\n\t\tsubSongListBy() {\n\t\t\tlet t = !this.isSub ? 1 : 2; // 1 为收藏,2为取消收藏\n\t\t\t// 发送网络请求 收藏/取消收藏当前歌单\n\t\t\tsubSongList(t, this.id)\n\t\t\t\t.then(res => {\n\t\t\t\t\t// console.log(res);\n\t\t\t\t\tif (res.data.code == 200) {\n\t\t\t\t\t\tthis.isSub = !this.isSub;\n\t\t\t\t\t\t// 重新获取用户歌单\n\t\t\t\t\t\tgetUserSonglist(this.userInfo.userId).then(res => {\n\t\t\t\t\t\t\tthis.setItem(\"userSongList\", res.data.playlist);\n\t\t\t\t\t\t\tthis.$store.dispatch(\"saveUserSongList\", res.data.playlist);\n\t\t\t\t\t\t\tif (t == 1) {\n\t\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\t\t\t\tmessage: \"收藏成功\",\n\t\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\t\t\t\tmessage: \"取消收藏成功\",\n\t\t\t\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(err => this.$message.warning(err ,\"操作失败,请重试\"));\n\t\t},\n\n\t\t/*如果是用户喜欢的歌单，点击喜欢歌曲后更新歌单*/\n\t\tupdateSonglist() {\n\t\t\tthis.getSongListDetailBy();\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.reload();\n\t\t\t}, 1000);\n\t\t},\n\t},\n\twatch: {\n\t\t// 路由push相同地址不同参数时 不会自动刷新页面，这里通过watch监听路由变化，一但发生变化reload刷新\n\t\t$route(to, from) {\n\t\t\tif (to !== from) {\n\t\t\t\tthis.reload();\n\t\t\t}\n\t\t},\n\t},\n};\n</script>\n\n<style lang=\"less\" scoped></style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}