{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getNewSongs } from \"../../../../../network/findmusic/newsongs/newsongs\";\nimport { mapGetters } from \"vuex\";\nimport { getSongUrl, checkMusic } from \"../../../../../network/playmusic/playmusic.js\";\nimport TypeNav from \"./TypeNav.vue\";\nexport default {\n  name: \"NewMusic\",\n  components: {\n    TypeNav\n  },\n  data() {\n    return {\n      typeitem: [{\n        type: \"全部\",\n        code: \"0\"\n      }, {\n        type: \"华语\",\n        code: \"7\"\n      }, {\n        type: \"欧美\",\n        code: \"96\"\n      }, {\n        type: \"日本\",\n        code: \"8\"\n      }, {\n        type: \"韩国\",\n        code: \"16\"\n      }],\n      musiclist: []\n    };\n  },\n  created() {\n    //   默认获取全部分类的歌曲\n    this.getNewSongsBy(0);\n  },\n  computed: {\n    ...mapGetters([\"nowSongDetail\", \"isPlaying\"])\n  },\n  filters: {\n    // 格式化索引\n    formatIndex(index) {\n      if (index < 9) {\n        return \"0\" + (index + 1);\n      } else return index + 1;\n    }\n  },\n  methods: {\n    /* \n      网络请求\n      */\n    //获取最新歌曲\n    getNewSongsBy(type) {\n      getNewSongs(type).then(res => {\n        this.musiclist = res.data.data;\n      });\n    },\n    /* \n      事件监听\n      */\n    //分类导航\n    typeItemClick(code) {\n      //   console.log(code);\n      this.activeCode = code;\n      this.getNewSongsBy(code);\n    },\n    // 点击播放全部按钮\n    playAll() {\n      let formatSongList = [];\n      this.musiclist.forEach(song => {\n        formatSongList.push(this.getSongInfo(song));\n      });\n      this.$store.dispatch(\"addAllSong\", formatSongList);\n      //默认播放第一首歌\n      getSongUrl(formatSongList[0].id).then(res => {\n        this.$store.dispatch(\"saveSongUrl\", res.data.data[0].url);\n      });\n      //提交vuex保存当前歌曲详情\n      this.$store.dispatch(\"saveSongDetail\", formatSongList[0]);\n    },\n    // 提取需要的歌曲信息\n    getSongInfo(song) {\n      let nowSongInfo = {\n        al: {},\n        ar: [{}]\n      };\n      nowSongInfo.id = song.id; //歌曲id\n      nowSongInfo.name = song.name; //歌曲名\n      nowSongInfo.dt = song.duration; //歌曲时长\n      nowSongInfo.al.picUrl = song.album.picUrl; //专辑封面\n      nowSongInfo.al.name = song.album.name; //专辑名\n      nowSongInfo.al.id = song.album.id; //专辑id\n      nowSongInfo.ar[0].name = song.artists[0].name; //歌手名\n      nowSongInfo.ar[0].id = song.artists[0].id; //歌手id\n      if (song.mvid != 0) {\n        nowSongInfo.mv = song.mvid; //mv的id\n      }\n\n      return nowSongInfo;\n    },\n    //播放音乐\n    playMusic(song) {\n      checkMusic(song.id).then(res => {\n        // 提交歌曲url\n        getSongUrl(song.id).then(res => {\n          this.$store.dispatch(\"saveSongUrl\", res.data.data[0].url);\n        });\n        // 更新播放状态\n        this.$store.dispatch(\"changePlayState\", true);\n        //提交vuex保存当前歌曲详情\n        this.$store.dispatch(\"saveSongDetail\", this.getSongInfo(song));\n        // 提交vuex添加到播放列表\n        this.$store.dispatch(\"addPlayinglist\", this.getSongInfo(song));\n        console.log(res);\n      }).catch(err => {\n        this.$message({\n          message: \"暂时无法播放，换首试试\",\n          type: \"warning\",\n          center: true\n        });\n        console.log(err);\n      });\n    },\n    // 实现当前播放歌曲行高亮\n    tableRowClassName({\n      row,\n      rowIndex\n    }) {\n      row.index = rowIndex;\n      if (rowIndex % 2 !== 0) {\n        return \"rowEven\";\n      }\n    },\n    // 点击歌手 去往歌手页面\n    toSinger(id) {\n      this.$router.push(\"/singerdetail/\" + id);\n    },\n    // 去往专辑页面\n    toAlbum(id) {\n      this.$router.push(\"/albumdetail/\" + id);\n    },\n    // 去往MV页面\n    toMvDetail(id) {\n      this.$router.push({\n        name: \"VideoDetail\",\n        params: {\n          id,\n          type: \"mv\"\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["getNewSongs","mapGetters","getSongUrl","checkMusic","TypeNav","name","components","data","typeitem","type","code","musiclist","created","getNewSongsBy","computed","filters","formatIndex","index","methods","then","res","typeItemClick","activeCode","playAll","formatSongList","forEach","song","push","getSongInfo","$store","dispatch","id","url","nowSongInfo","al","ar","dt","duration","picUrl","album","artists","mvid","mv","playMusic","console","log","catch","err","$message","message","center","tableRowClassName","row","rowIndex","toSinger","$router","toAlbum","toMvDetail","params"],"sources":["src/views/findmusic/newsongs/Childcomps/NewMusic.vue"],"sourcesContent":["<template>\n\t<div class=\"newmusic\">\n\t\t<div class=\"hd\">\n\t\t\t<!-- 分类导航 -->\n\t\t\t<TypeNav :typeitem=\"typeitem\" @typeItemClick=\"typeItemClick\" />\n\t\t\t<div class=\"btn\">\n\t\t\t\t<el-button type=\"info\" size=\"mini\" icon=\"el-icon-video-play\" @click=\"playAll\">播放全部</el-button>\n\t\t\t\t<el-button icon=\"el-icon-folder-add\" size=\"mini\"><span>收藏全部</span> </el-button>\n\t\t\t</div>\n\t\t</div>\n\t\t<!-- 歌曲列表 -->\n\t\t<div class=\"bd\">\n\t\t\t<el-table :show-header=\"false\" style=\"width: 100%\" :data=\"musiclist\" @row-dblclick=\"playMusic\" :row-class-name=\"tableRowClassName\" empty-text=\"数据加载中~\">\n\t\t\t\t<el-table-column width=\"80\">\n\t\t\t\t\t<template v-slot=\"scope\">\n\t\t\t\t\t\t<span class=\"iconfont\" :class=\"isPlaying ? ' icon-voice' : 'icon-jingyin_laba'\" v-if=\"scope.row.id == nowSongDetail.id\"></span>\n\t\t\t\t\t\t<span v-else>{{ scope.row.index | formatIndex }}</span>\n\t\t\t\t\t</template>\n\t\t\t\t</el-table-column>\n\t\t\t\t<el-table-column prop=\"album.picUrl\" label=\"封面\" width=\"80\">\n\t\t\t\t\t<template v-slot=\"scope\">\n\t\t\t\t\t\t<div class=\"cover\" @click=\"playMusic(scope.row)\">\n\t\t\t\t\t\t\t<img v-lazy=\"scope.row.album.picUrl + '?param=80y80'\" />\n\t\t\t\t\t\t\t<div class=\"mask\"><span class=\"iconfont icon-play1\"></span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</template>\n\t\t\t\t</el-table-column>\n\n\t\t\t\t<el-table-column prop=\"name\" label=\"歌曲\" width=\"350\" :show-overflow-tooltip=\"true\">\n\t\t\t\t\t<template v-slot=\"scope\">\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{{ scope.row.name }}\n\t\t\t\t\t\t\t<i class=\"iconfont icon-mv\" v-if=\"scope.row.mvid != 0\" @click=\"toMvDetail(scope.row.mvid)\"></i>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</template>\n\t\t\t\t</el-table-column>\n\t\t\t\t<el-table-column prop=\"artists[0].name\" label=\"歌手\" width=\"250\" :show-overflow-tooltip=\"true\">\n\t\t\t\t\t<template v-slot=\"scope\">\n\t\t\t\t\t\t<span @click=\"toSinger(scope.row.artists[0].id)\" class=\"sthover\">\n\t\t\t\t\t\t\t{{ scope.row.artists[0].name }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</template>\n\t\t\t\t</el-table-column>\n\t\t\t\t<el-table-column prop=\"album.name\" label=\"专辑\" width=\"300\" :show-overflow-tooltip=\"true\">\n\t\t\t\t\t<template v-slot=\"scope\">\n\t\t\t\t\t\t<span @click=\"toAlbum(scope.row.album.id)\" class=\"sthover\">\n\t\t\t\t\t\t\t{{ scope.row.album.name }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</template>\n\t\t\t\t</el-table-column>\n\t\t\t\t<el-table-column prop=\"duration\" label=\"时长\">\n\t\t\t\t\t<template v-slot=\"scope\">\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{{ scope.row.duration | formatDuration }}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</template>\n\t\t\t\t</el-table-column>\n\t\t\t</el-table>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { getNewSongs } from \"../../../../../network/findmusic/newsongs/newsongs\";\nimport { mapGetters } from \"vuex\";\nimport { getSongUrl, checkMusic } from \"../../../../../network/playmusic/playmusic.js\";\nimport TypeNav from \"./TypeNav.vue\";\nexport default {\n\tname: \"NewMusic\",\n\tcomponents: { TypeNav },\n\tdata() {\n\t\treturn {\n\t\t\ttypeitem: [\n\t\t\t\t{ type: \"全部\", code: \"0\" },\n\t\t\t\t{ type: \"华语\", code: \"7\" },\n\t\t\t\t{ type: \"欧美\", code: \"96\" },\n\t\t\t\t{ type: \"日本\", code: \"8\" },\n\t\t\t\t{ type: \"韩国\", code: \"16\" },\n\t\t\t],\n\t\t\tmusiclist: [],\n\t\t};\n\t},\n\tcreated() {\n\t\t//   默认获取全部分类的歌曲\n\t\tthis.getNewSongsBy(0);\n\t},\n\tcomputed: {\n\t\t...mapGetters([\"nowSongDetail\", \"isPlaying\"]),\n\t},\n\tfilters: {\n\t\t// 格式化索引\n\t\tformatIndex(index) {\n\t\t\tif (index < 9) {\n\t\t\t\treturn \"0\" + (index + 1);\n\t\t\t} else return index + 1;\n\t\t},\n\t},\n\tmethods: {\n\t\t/* \n    网络请求\n    */\n\t\t//获取最新歌曲\n\t\tgetNewSongsBy(type) {\n\t\t\tgetNewSongs(type).then(res => {\n\t\t\t\tthis.musiclist = res.data.data;\n\t\t\t});\n\t\t},\n\t\t/* \n    事件监听\n    */\n\t\t//分类导航\n\t\ttypeItemClick(code) {\n\t\t\t//   console.log(code);\n\t\t\tthis.activeCode = code;\n\t\t\tthis.getNewSongsBy(code);\n\t\t},\n\n\t\t// 点击播放全部按钮\n\t\tplayAll() {\n\t\t\tlet formatSongList = [];\n\t\t\tthis.musiclist.forEach(song => {\n\t\t\t\tformatSongList.push(this.getSongInfo(song));\n\t\t\t});\n\t\t\tthis.$store.dispatch(\"addAllSong\", formatSongList);\n\t\t\t//默认播放第一首歌\n\t\t\tgetSongUrl(formatSongList[0].id).then(res => {\n\t\t\t\tthis.$store.dispatch(\"saveSongUrl\", res.data.data[0].url);\n\t\t\t});\n\t\t\t//提交vuex保存当前歌曲详情\n\t\t\tthis.$store.dispatch(\"saveSongDetail\", formatSongList[0]);\n\t\t},\n\t\t// 提取需要的歌曲信息\n\t\tgetSongInfo(song) {\n\t\t\tlet nowSongInfo = { al: {}, ar: [{}] };\n\t\t\tnowSongInfo.id = song.id; //歌曲id\n\t\t\tnowSongInfo.name = song.name; //歌曲名\n\t\t\tnowSongInfo.dt = song.duration; //歌曲时长\n\t\t\tnowSongInfo.al.picUrl = song.album.picUrl; //专辑封面\n\t\t\tnowSongInfo.al.name = song.album.name; //专辑名\n\t\t\tnowSongInfo.al.id = song.album.id; //专辑id\n\t\t\tnowSongInfo.ar[0].name = song.artists[0].name; //歌手名\n\t\t\tnowSongInfo.ar[0].id = song.artists[0].id; //歌手id\n\t\t\tif (song.mvid != 0) {\n\t\t\t\tnowSongInfo.mv = song.mvid; //mv的id\n\t\t\t}\n\t\t\treturn nowSongInfo;\n\t\t},\n\t\t//播放音乐\n\t\tplayMusic(song) {\n\t\t\tcheckMusic(song.id)\n\t\t\t\t.then(res => {\n\t\t\t\t\t// 提交歌曲url\n\t\t\t\t\tgetSongUrl(song.id).then(res => {\n\t\t\t\t\t\tthis.$store.dispatch(\"saveSongUrl\", res.data.data[0].url);\n\t\t\t\t\t});\n\t\t\t\t\t// 更新播放状态\n\t\t\t\t\tthis.$store.dispatch(\"changePlayState\", true);\n\t\t\t\t\t//提交vuex保存当前歌曲详情\n\t\t\t\t\tthis.$store.dispatch(\"saveSongDetail\", this.getSongInfo(song));\n\t\t\t\t\t// 提交vuex添加到播放列表\n\t\t\t\t\tthis.$store.dispatch(\"addPlayinglist\", this.getSongInfo(song));\n\t\t\t\t\tconsole.log(res)\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tthis.$message({\n\t\t\t\t\t\tmessage: \"暂时无法播放，换首试试\",\n\t\t\t\t\t\ttype: \"warning\",\n\t\t\t\t\t\tcenter: true,\n\t\t\t\t\t});\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t});\n\t\t},\n\t\t// 实现当前播放歌曲行高亮\n\t\ttableRowClassName({ row, rowIndex }) {\n\t\t\trow.index = rowIndex;\n\t\t\tif (rowIndex % 2 !== 0) {\n\t\t\t\treturn \"rowEven\";\n\t\t\t}\n\t\t},\n\t\t// 点击歌手 去往歌手页面\n\t\ttoSinger(id) {\n\t\t\tthis.$router.push(\"/singerdetail/\" + id);\n\t\t},\n\t\t// 去往专辑页面\n\t\ttoAlbum(id) {\n\t\t\tthis.$router.push(\"/albumdetail/\" + id);\n\t\t},\n\t\t// 去往MV页面\n\t\ttoMvDetail(id) {\n\t\t\tthis.$router.push({\n\t\t\t\tname: \"VideoDetail\",\n\t\t\t\tparams: { id, type: \"mv\" },\n\t\t\t});\n\t\t},\n\t},\n};\n</script>\n\n<style lang=\"less\" scoped>\n.hd {\n\t.type-nav {\n\t\t.el-menu-item {\n\t\t\tcolor: #303133;\n\t\t\theight: 30px;\n\t\t\tline-height: 30px;\n\t\t\tpadding: 0 8px;\n\t\t}\n\t\t.el-menu--horizontal > .el-menu-item.is-active {\n\t\t\tborder-bottom: 2px solid #000;\n\t\t\tcolor: #000;\n\t\t}\n\t}\n\t.btn {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tmargin: 10px 0;\n\t}\n}\n.icon-voice,\n.icon-jingyin_laba {\n\tcolor: var(--themeColor);\n}\n.icon-mv {\n\tfont-size: 22px;\n\tcolor: var(--themeColor);\n\tcursor: pointer;\n\tpadding: 5px 0 0 5px;\n}\n.sthover:hover {\n\tdisplay: inline-block;\n\tcolor: var(--themeColor);\n\twidth: 100%;\n\tcursor: pointer;\n}\n.cover {\n\tposition: relative;\n\twidth: 60px;\n\theight: 60px;\n\timg {\n\t\twidth: 100%;\n\t}\n\t.mask {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tcolor: #fff;\n\t\tcursor: pointer;\n\t\t.iconfont {\n\t\t\tfont-size: 22px;\n\t\t\t&:hover {\n\t\t\t\tbackground: rgba(100, 100, 100, 0.7);\n\t\t\t\tborder-radius: 50%;\n\t\t\t}\n\t\t}\n\t}\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}