{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* 网络请求 */\nimport { getNowLyric } from \"../../../../network/playmusic/playmusic\";\n/* vuex */\nimport { mapGetters } from \"vuex\";\n/* 子组件 */\nimport CommentPage from \"../../../components/content/comment/commentPage.vue\";\nexport default {\n  name: \"PlayingSongDetail\",\n  components: {\n    CommentPage\n  },\n  computed: {\n    ...mapGetters([\"isPlaying\", \"nowSongDetail\", \"currentSecond\", \"isShowSongDetail\", \"currentRow\"]),\n    cover() {\n      return this.nowSongDetail.al.picUrl + \"?param=200y200\";\n    }\n  },\n  data() {\n    return {\n      formatlyric: [],\n      //格式化后的歌词\n      currentIndex: null,\n      //当前鼠标经过的歌词索引\n      isActive: false //鼠标是否经过歌词\n    };\n  },\n\n  created() {\n    if (Object.keys(this.nowSongDetail).length != 0) {\n      this.getNowLyricBy(this.nowSongDetail.id);\n    }\n  },\n  methods: {\n    // 关闭歌曲详情页\n    closeSongDetail() {\n      this.$store.commit(\"showSongDetail\");\n    },\n    //   获取歌词\n    getNowLyricBy(songId) {\n      getNowLyric(songId).then(res => {\n        if (res.data.nolyric) return; //如果没有歌词就return\n        let lyric = res.data.lrc.lyric;\n        this.formatLyric(lyric);\n        this.$store.dispatch(\"saveCurrentLyric\", this.formatlyric);\n      });\n    },\n    // 格式化歌词\n    formatLyric(lyric_str) {\n      // 将歌词字符串 根据换行符 转换为 数组\n      let lyric_arr = lyric_str.split(\"\\n\");\n      // 遍历歌词数组\n      for (let i = 0; i < lyric_arr.length; i++) {\n        //得到每一行歌词\n        let lyric_row = lyric_arr[i];\n        //再将每一行歌词根据”]“分隔为时间和歌词,变为每行歌词数组\n        let lyric_row_arr = lyric_row.split(\"]\");\n        // 通过pop()方法得到每行歌词文本\n        let lryic_row_text = lyric_row_arr.pop();\n        // 处理每行歌词时间\n        lyric_row_arr.forEach(item => {\n          let LyricRowObj = {};\n          let time_arr = item.substr(1, item.length - 1).split(\":\"); //去掉\"[\",并且分离出 分钟和秒\n          // 将每行歌词时间转换为秒\n          let seconds_row = time_arr[0] * 60 + Math.ceil(time_arr[1]);\n          // 将每行歌词时间和文本添加到每行歌词对象中\n          if (lryic_row_text.trim().length !== 0) {\n            LyricRowObj.time = seconds_row;\n            LyricRowObj.text = lryic_row_text;\n            //再将每行歌词对象添加到数组中\n            this.formatlyric.push(LyricRowObj);\n          }\n        });\n      }\n      // 根据时间对歌词排序\n      this.formatlyric.sort((a, b) => {\n        return a.time - b.time;\n      });\n    },\n    // 点击歌词播放\n    lyricClick(lyric) {\n      let audio = document.querySelector(\"#audio\");\n      audio.currentTime = lyric.time;\n      this.isActive = false;\n    },\n    // 歌词上是否显示时间\n    showTime(index) {\n      this.currentIndex = index;\n      this.isActive = true;\n    },\n    /* 评论分页事件 */\n    changePage() {\n      // 返回指定位置\n      this.$refs.playingSongDetail.scrollTo({\n        top: this.$refs.comment.offsetTop\n      });\n    },\n    // 去往专辑页面\n    toAlbum() {\n      this.$router.push(\"/albumdetail/\" + this.nowSongDetail.al.id);\n      this.closeSongDetail(); //关闭当前歌曲详情页\n    },\n\n    // 去往歌手界面\n    toSinger() {\n      this.$router.push(\"/singerdetail/\" + this.nowSongDetail.ar[0].id);\n      this.closeSongDetail(); //关闭当前歌曲详情页\n    },\n\n    //去往用户界面 需要关闭当前歌曲详情页\n    toUserDetail() {\n      this.closeSongDetail();\n    },\n    pausePlay() {\n      this.$store.dispatch(\"changePlayState\", false);\n      document.querySelector(\"#audio\").pause();\n    },\n    startPlay() {\n      this.$store.dispatch(\"changePlayState\", true);\n      document.querySelector(\"#audio\").play();\n    }\n  },\n  watch: {\n    // 监听当前时间的变化，实现滚动\n    currentSecond(currentSecond) {\n      if (currentSecond != 0) {\n        // 遍历格式化后的歌词数组\n        this.formatlyric.forEach((item, index) => {\n          // 如果歌曲当前秒数和歌词数组中的秒数相等\n          // 这里写==可以在使用原生scroll实现歌词滚动的时候不抖动，如果写>=会抖动\n          if (Math.ceil(currentSecond) == item.time) {\n            //.1 使用位移来实现歌词滚动\n            // this.$refs.scrollLyric.style.transform = `translateY(${-45 * index}px)`;\n            //.2 使用原生scroll实现歌词滚动\n            this.$store.commit(\"saveCurrentRow\", index); //用于判断当前歌词高亮显示(使用vuex是因为在footer中使用到了currentRow)\n            // 当鼠标经过时停止滚动\n            if (!this.isActive) {\n              this.$refs.scrollLyric.scrollTo({\n                top: 45 * index,\n                behavior: \"smooth\"\n              });\n            }\n          }\n        });\n      }\n    },\n    // 监听当前歌曲变化\n    nowSongDetail() {\n      if (Object.keys(this.nowSongDetail).length != 0) {\n        // 歌曲改变后从新获取歌词\n        this.formatlyric = [];\n        // this.$refs.scrollLyric.style.transform = \"translateY(0px)\";\n        this.getNowLyricBy(this.nowSongDetail.id);\n        this.$store.commit(\"saveCurrentRow\", null);\n      }\n    },\n    // 当打开歌曲详情页时歌词立即滚动到当前播放行\n    isShowSongDetail() {\n      if (this.isShowSongDetail && Object.keys(this.nowSongDetail).length != 0) {\n        this.$refs.scrollLyric.scrollTop = 45 * this.currentRow;\n        this.$refs.playingSongDetail.scrollTop = 0;\n      }\n    }\n  }\n};","map":{"version":3,"names":["getNowLyric","mapGetters","CommentPage","name","components","computed","cover","nowSongDetail","al","picUrl","data","formatlyric","currentIndex","isActive","created","Object","keys","length","getNowLyricBy","id","methods","closeSongDetail","$store","commit","songId","then","res","nolyric","lyric","lrc","formatLyric","dispatch","lyric_str","lyric_arr","split","i","lyric_row","lyric_row_arr","lryic_row_text","pop","forEach","item","LyricRowObj","time_arr","substr","seconds_row","Math","ceil","trim","time","text","push","sort","a","b","lyricClick","audio","document","querySelector","currentTime","showTime","index","changePage","$refs","playingSongDetail","scrollTo","top","comment","offsetTop","toAlbum","$router","toSinger","ar","toUserDetail","pausePlay","pause","startPlay","play","watch","currentSecond","scrollLyric","behavior","isShowSongDetail","scrollTop","currentRow"],"sources":["src/components/content/player/PlayingSongDetail.vue"],"sourcesContent":["<template>\n\t<div class=\"playing-song-detail\" ref=\"playingSongDetail\">\n\t\t<!-- 返回顶部按钮 -->\n\t\t<el-backtop target=\".playing-song-detail\" :right=\"20\" :bottom=\"75\" id=\"playBackTop\"></el-backtop>\n\t\t<!-- 关闭按钮 -->\n\t\t<span class=\"iconfont icon-down-arrow\" @click=\"closeSongDetail\"></span>\n\t\t<!-- 主要内容 -->\n\t\t<div class=\"main-content\" v-if=\"Object.keys(nowSongDetail).length !== 0\">\n\t\t\t<!-- 顶部歌词相关内容 -->\n\t\t\t<div class=\"top-lyrics\">\n\t\t\t\t<!-- 左侧旋转唱片 -->\n\t\t\t\t<div class=\"left-cover\">\n\t\t\t\t\t<!-- 唱片开关旋转 -->\n\t\t\t\t\t<div class=\"switchs swichsRotate\" :class=\"{ swichsPlay: isPlaying, switchsPause: !isPlaying }\">\n\t\t\t\t\t\t<img src=\"~assets/imgs/cp1.png\" alt=\"\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<!-- 唱片旋转 -->\n\t\t\t\t\t<div class=\"record record-rotate\" :class=\"{ startRotate: isPlaying }\" @click=\"isPlaying ? pausePlay() : startPlay()\">\n\t\t\t\t\t\t<img class=\"cp2\" src=\"~assets/imgs/cp2.png\" alt=\"\" />\n\t\t\t\t\t\t<img class=\"cover\" :src=\"cover\" alt=\"\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<img :src=\"cover\" alt=\"\" class=\"song-bgImg\" />\n\t\t\t\t</div>\n\t\t\t\t<!-- 右侧歌词 -->\n\t\t\t\t<div class=\"right-lyrics\">\n\t\t\t\t\t<div class=\"hd\">\n\t\t\t\t\t\t<h2>{{ nowSongDetail.name }}</h2>\n\t\t\t\t\t\t<div v-if=\"nowSongDetail.al.name\">\n\t\t\t\t\t\t\t专辑：<span @click=\"toAlbum\">{{ nowSongDetail.al.name }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t歌手：<span @click=\"toSinger\">{{ nowSongDetail.ar[0].name }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"bd\" id=\"scrollLyric\" ref=\"scrollLyric\">\n\t\t\t\t\t\t<!-- 有歌词时 -->\n\t\t\t\t\t\t<!-- <div class=\"plac\" style=\"height: 135px\"></div> -->\n\t\t\t\t\t\t<ul v-if=\"formatlyric.length !== 0\">\n\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\tv-for=\"(item, index) in formatlyric\"\n\t\t\t\t\t\t\t\t:key=\"index\"\n\t\t\t\t\t\t\t\t:class=\"{ currentLyric: currentRow == index }\"\n\t\t\t\t\t\t\t\t@click=\"lyricClick(item, index)\"\n\t\t\t\t\t\t\t\t@mouseover=\"showTime(index)\"\n\t\t\t\t\t\t\t\t@mouseleave=\"isActive = false\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span class=\"playIcon\" v-show=\"isActive && currentIndex == index\">\n\t\t\t\t\t\t\t\t\t<i class=\"iconfont icon-play\"></i>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span class=\"lyric-item\">{{ item.text.trim() }}</span>\n\t\t\t\t\t\t\t\t<span class=\"time\" v-show=\"isActive && currentIndex == index\">{{ item.time | formatDuration }}</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<!-- 没有歌词时 -->\n\t\t\t\t\t\t<div style=\"padding-top: 120px\" v-else>\n\t\t\t\t\t\t\t<h2>暂无歌词，请您欣赏</h2>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<!-- 底部评论 -->\n\t\t\t<div class=\"bot-content\" ref=\"comment\">\n\t\t\t\t<!-- 评论 -->\n\t\t\t\t<div class=\"song-comment\">\n\t\t\t\t\t<CommentPage :comment-type=\"0\" :commentres-id=\"nowSongDetail.id\" @changePage=\"changePage\" @toUserDetail=\"toUserDetail\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"nosongdetail\" v-if=\"Object.keys(nowSongDetail).length == 0\">\n\t\t\t<div>暂无音乐</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n/* 网络请求 */\nimport { getNowLyric } from \"../../../../network/playmusic/playmusic\";\n/* vuex */\nimport { mapGetters } from \"vuex\";\n/* 子组件 */\nimport CommentPage from \"../../../components/content/comment/commentPage.vue\";\nexport default {\n\tname: \"PlayingSongDetail\",\n\tcomponents: { CommentPage },\n\tcomputed: {\n\t\t...mapGetters([\"isPlaying\", \"nowSongDetail\", \"currentSecond\", \"isShowSongDetail\", \"currentRow\"]),\n\t\tcover() {\n\t\t\treturn this.nowSongDetail.al.picUrl + \"?param=200y200\";\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tformatlyric: [], //格式化后的歌词\n\t\t\tcurrentIndex: null, //当前鼠标经过的歌词索引\n\t\t\tisActive: false, //鼠标是否经过歌词\n\t\t};\n\t},\n\tcreated() {\n\t\tif (Object.keys(this.nowSongDetail).length != 0) {\n\t\t\tthis.getNowLyricBy(this.nowSongDetail.id);\n\t\t}\n\t},\n\tmethods: {\n\t\t// 关闭歌曲详情页\n\t\tcloseSongDetail() {\n\t\t\tthis.$store.commit(\"showSongDetail\");\n\t\t},\n\t\t//   获取歌词\n\t\tgetNowLyricBy(songId) {\n\t\t\tgetNowLyric(songId).then(res => {\n\t\t\t\tif (res.data.nolyric) return; //如果没有歌词就return\n\t\t\t\tlet lyric = res.data.lrc.lyric;\n\t\t\t\tthis.formatLyric(lyric);\n\t\t\t\tthis.$store.dispatch(\"saveCurrentLyric\", this.formatlyric);\n\t\t\t});\n\t\t},\n\t\t// 格式化歌词\n\t\tformatLyric(lyric_str) {\n\t\t\t// 将歌词字符串 根据换行符 转换为 数组\n\t\t\tlet lyric_arr = lyric_str.split(\"\\n\");\n\t\t\t// 遍历歌词数组\n\t\t\tfor (let i = 0; i < lyric_arr.length; i++) {\n\t\t\t\t//得到每一行歌词\n\t\t\t\tlet lyric_row = lyric_arr[i];\n\t\t\t\t//再将每一行歌词根据”]“分隔为时间和歌词,变为每行歌词数组\n\t\t\t\tlet lyric_row_arr = lyric_row.split(\"]\");\n\t\t\t\t// 通过pop()方法得到每行歌词文本\n\t\t\t\tlet lryic_row_text = lyric_row_arr.pop();\n\t\t\t\t// 处理每行歌词时间\n\t\t\t\tlyric_row_arr.forEach((item) => {\n\t\t\t\t\tlet LyricRowObj = {};\n\t\t\t\t\tlet time_arr = item.substr(1, item.length - 1).split(\":\"); //去掉\"[\",并且分离出 分钟和秒\n\t\t\t\t\t// 将每行歌词时间转换为秒\n\t\t\t\t\tlet seconds_row = time_arr[0] * 60 + Math.ceil(time_arr[1]);\n\t\t\t\t\t// 将每行歌词时间和文本添加到每行歌词对象中\n\t\t\t\t\tif (lryic_row_text.trim().length !== 0) {\n\t\t\t\t\t\tLyricRowObj.time = seconds_row;\n\t\t\t\t\t\tLyricRowObj.text = lryic_row_text;\n\t\t\t\t\t\t//再将每行歌词对象添加到数组中\n\t\t\t\t\t\tthis.formatlyric.push(LyricRowObj);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t// 根据时间对歌词排序\n\t\t\tthis.formatlyric.sort((a, b) => {\n\t\t\t\treturn a.time - b.time;\n\t\t\t});\n\t\t},\n\t\t// 点击歌词播放\n\t\tlyricClick(lyric) {\n\t\t\tlet audio = document.querySelector(\"#audio\");\n\t\t\taudio.currentTime = lyric.time;\n\t\t\tthis.isActive = false;\n\t\t},\n\t\t// 歌词上是否显示时间\n\t\tshowTime(index) {\n\t\t\tthis.currentIndex = index;\n\t\t\tthis.isActive = true;\n\t\t},\n\t\t/* 评论分页事件 */\n\t\tchangePage() {\n\t\t\t// 返回指定位置\n\t\t\tthis.$refs.playingSongDetail.scrollTo({\n\t\t\t\ttop: this.$refs.comment.offsetTop,\n\t\t\t});\n\t\t},\n\t\t// 去往专辑页面\n\t\ttoAlbum() {\n\t\t\tthis.$router.push(\"/albumdetail/\" + this.nowSongDetail.al.id);\n\t\t\tthis.closeSongDetail(); //关闭当前歌曲详情页\n\t\t},\n\t\t// 去往歌手界面\n\t\ttoSinger() {\n\t\t\tthis.$router.push(\"/singerdetail/\" + this.nowSongDetail.ar[0].id);\n\t\t\tthis.closeSongDetail(); //关闭当前歌曲详情页\n\t\t},\n\t\t//去往用户界面 需要关闭当前歌曲详情页\n\t\ttoUserDetail() {\n\t\t\tthis.closeSongDetail();\n\t\t},\n\t\tpausePlay() {\n\t\t\tthis.$store.dispatch(\"changePlayState\", false);\n\t\t\tdocument.querySelector(\"#audio\").pause();\n\t\t},\n\t\tstartPlay() {\n\t\t\tthis.$store.dispatch(\"changePlayState\", true);\n\t\t\tdocument.querySelector(\"#audio\").play();\n\t\t},\n\t},\n\twatch: {\n\t\t// 监听当前时间的变化，实现滚动\n\t\tcurrentSecond(currentSecond) {\n\t\t\tif (currentSecond != 0) {\n\t\t\t\t// 遍历格式化后的歌词数组\n\t\t\t\tthis.formatlyric.forEach((item, index) => {\n\t\t\t\t\t// 如果歌曲当前秒数和歌词数组中的秒数相等\n\t\t\t\t\t// 这里写==可以在使用原生scroll实现歌词滚动的时候不抖动，如果写>=会抖动\n\t\t\t\t\tif (Math.ceil(currentSecond) == item.time) {\n\t\t\t\t\t\t//.1 使用位移来实现歌词滚动\n\t\t\t\t\t\t// this.$refs.scrollLyric.style.transform = `translateY(${-45 * index}px)`;\n\t\t\t\t\t\t//.2 使用原生scroll实现歌词滚动\n\t\t\t\t\t\tthis.$store.commit(\"saveCurrentRow\", index); //用于判断当前歌词高亮显示(使用vuex是因为在footer中使用到了currentRow)\n\t\t\t\t\t\t// 当鼠标经过时停止滚动\n\t\t\t\t\t\tif (!this.isActive) {\n\t\t\t\t\t\t\tthis.$refs.scrollLyric.scrollTo({\n\t\t\t\t\t\t\t\ttop: 45 * index,\n\t\t\t\t\t\t\t\tbehavior: \"smooth\",\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t// 监听当前歌曲变化\n\t\tnowSongDetail() {\n\t\t\tif (Object.keys(this.nowSongDetail).length != 0) {\n\t\t\t\t// 歌曲改变后从新获取歌词\n\t\t\t\tthis.formatlyric = [];\n\t\t\t\t// this.$refs.scrollLyric.style.transform = \"translateY(0px)\";\n\t\t\t\tthis.getNowLyricBy(this.nowSongDetail.id);\n\t\t\t\tthis.$store.commit(\"saveCurrentRow\", null);\n\t\t\t}\n\t\t},\n\t\t// 当打开歌曲详情页时歌词立即滚动到当前播放行\n\t\tisShowSongDetail() {\n\t\t\tif (this.isShowSongDetail && Object.keys(this.nowSongDetail).length != 0) {\n\t\t\t\tthis.$refs.scrollLyric.scrollTop = 45 * this.currentRow;\n\t\t\t\tthis.$refs.playingSongDetail.scrollTop = 0;\n\t\t\t}\n\t\t},\n\t},\n};\n</script>\n\n<style lang=\"less\" scoped>\n.playing-song-detail {\n\tposition: absolute;\n\tbottom: 70px;\n\tleft: 0;\n\tright: 0;\n\twidth: 100%;\n\theight: calc(100vh - 70px);\n\tbackground: #fff;\n\tz-index: 99;\n\toverflow-y: scroll;\n\t// 关闭页面按钮\n\t.icon-down-arrow {\n\t\tposition: fixed;\n\t\ttop: 10px;\n\t\tleft: 20px;\n\t\tfont-size: 32px;\n\t\tfont-weight: 700;\n\t\tcursor: pointer;\n\t}\n\t// 音乐详情\n\t.main-content {\n\t\tposition: relative;\n\t\twidth: 1350px;\n\t\theight: 100%;\n\t\tmargin: 0 auto;\n\t\t.top-lyrics {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\twidth: 70%;\n\t\t\theight: 500px;\n\t\t\tmargin: 0px auto;\n\t\t\t// 旋转唱片\n\t\t\t.left-cover {\n\t\t\t\tposition: relative;\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\t\t\t\theight: 100%;\n\t\t\t\twidth: 30%;\n\t\t\t\t.switchs {\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tleft: 50%;\n\t\t\t\t\ttop: 8%;\n\t\t\t\t\tz-index: 2;\n\t\t\t\t\twidth: 40%;\n\t\t\t\t\ttransform-origin: 0 0; //设置旋转元素的基点位置\n\t\t\t\t\timg {\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.record {\n\t\t\t\t\tposition: relative;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\t.cp2 {\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t}\n\t\t\t\t\t.cover {\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tleft: 50%;\n\t\t\t\t\t\ttop: 50%;\n\t\t\t\t\t\ttransform: translate(-50%, -50%);\n\t\t\t\t\t\tz-index: -1;\n\t\t\t\t\t\twidth: 70%;\n\t\t\t\t\t\tborder-radius: 50%;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.song-bgImg {\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\ttop: 50%;\n\t\t\t\t\tleft: -90%;\n\t\t\t\t\tz-index: -1;\n\t\t\t\t\twidth: 300%;\n\t\t\t\t\tborder-radius: 20%;\n\t\t\t\t\ttransform: translate(10%, -50%);\n\t\t\t\t\tfilter: blur(350px) brightness(100%);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 右侧歌词\n\t\t\t.right-lyrics {\n\t\t\t\twidth: 55%;\n\t\t\t\t.hd {\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tdiv {\n\t\t\t\t\t\tpadding-top: 10px;\n\t\t\t\t\t\tspan {\n\t\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\t\tcolor: #5091ca;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.bd {\n\t\t\t\t\tmargin-top: 20px;\n\t\t\t\t\theight: 315px;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\toverflow-y: auto;\n\t\t\t\t\t// 有歌词\n\t\t\t\t\tul {\n\t\t\t\t\t\tpadding: 135px 0;\n\t\t\t\t\t\t// overflow: auto;\n\t\t\t\t\t\t// transform: translateY(0);\n\t\t\t\t\t\t// transition: all 0.5s;\n\t\t\t\t\t\tli {\n\t\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\t\theight: 45px;\n\t\t\t\t\t\t\ttransition: all 0.3s ease-in;\n\t\t\t\t\t\t\t// line-height: 45px;\n\t\t\t\t\t\t\t// white-space: nowrap;\n\t\t\t\t\t\t\t// overflow: hidden;\n\t\t\t\t\t\t\t// text-overflow: ellipsis;\n\t\t\t\t\t\t\t&:hover {\n\t\t\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\t\t\t// font-weight: 700;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t.lyric-item {\n\t\t\t\t\t\t\t\tflex: 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t.time,\n\t\t\t\t\t\t\t.playIcon {\n\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\twidth: 50px;\n\t\t\t\t\t\t\t\theight: 50px;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t.currentLyric {\n\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\tfont-weight: 700;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t::-webkit-scrollbar {\n\t\t\t\t\twidth: 0px;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.bot-content {\n\t\t\tmargin: 15px auto;\n\t\t\twidth: 70%;\n\t\t\t.song-comment {\n\t\t\t\tpadding-bottom: 15px;\n\t\t\t}\n\t\t}\n\t}\n\t// 暂无音乐\n\t.nosongdetail {\n\t\tdisplay: flex;\n\t\theight: 100%;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tfont-size: 24px;\n\t\tfont-weight: 700;\n\t}\n}\n// 唱片开关旋转动画\n.swichsRotate {\n\tanimation-play-state: paused;\n}\n.swichsPlay,\n.switchsPause {\n\tanimation-timing-function: linear;\n\tanimation-duration: 0.35s;\n\tanimation-fill-mode: forwards;\n\tanimation-play-state: running;\n}\n.swichsPlay {\n\tanimation-name: switchsPlay;\n}\n.switchsPause {\n\tanimation-name: switchsPause;\n}\n@keyframes switchsPlay {\n\t0% {\n\t\ttransform: rotate(-5deg);\n\t}\n\t100% {\n\t\ttransform: rotate(20deg);\n\t}\n}\n@keyframes switchsPause {\n\t0% {\n\t\ttransform: rotate(20deg);\n\t}\n\t100% {\n\t\ttransform: rotate(-5deg);\n\t}\n}\n// 唱片旋转\n.record-rotate {\n\tanimation-name: recordRotate;\n\tanimation-duration: 20s;\n\tanimation-timing-function: linear;\n\tanimation-iteration-count: infinite;\n\tanimation-play-state: paused;\n}\n.startRotate {\n\tanimation-play-state: running;\n}\n@keyframes recordRotate {\n\t0% {\n\t\ttransform: rotate(0deg);\n\t}\n\t100% {\n\t\ttransform: rotate(360deg);\n\t}\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}